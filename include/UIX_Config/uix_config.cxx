// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "uix_config.hxx"

// UIXConfig
//

bool UIXConfig::
locale_present () const
{
  return this->locale_present_;
}

void UIXConfig::
locale_present (bool x)
{
  this->locale_present_ = x;
}

const ::std::string& UIXConfig::
locale () const
{
  return this->locale_;
}

::std::string& UIXConfig::
locale ()
{
  return this->locale_;
}

void UIXConfig::
locale (const ::std::string& x)
{
  this->locale_ = x;
  this->locale_present_ = true;
}

const ::ApplicationStates& UIXConfig::
ApplicationStates () const
{
  return *this->ApplicationStates_;
}

::ApplicationStates& UIXConfig::
ApplicationStates ()
{
  return *this->ApplicationStates_;
}

void UIXConfig::
ApplicationStates (::ApplicationStates* x)
{
  delete this->ApplicationStates_;
  this->ApplicationStates_ = x;
}

// ApplicationStates
//

const ApplicationStates::AppState_sequence& ApplicationStates::
AppState () const
{
  return this->AppState_;
}

ApplicationStates::AppState_sequence& ApplicationStates::
AppState ()
{
  return this->AppState_;
}

// AppState
//

bool AppState::
id_present () const
{
  return this->id_present_;
}

void AppState::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char AppState::
id () const
{
  return this->id_;
}

signed char& AppState::
id ()
{
  return this->id_;
}

void AppState::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool AppState::
name_present () const
{
  return this->name_present_;
}

void AppState::
name_present (bool x)
{
  this->name_present_ = x;
}

const ::std::string& AppState::
name () const
{
  return this->name_;
}

::std::string& AppState::
name ()
{
  return this->name_;
}

void AppState::
name (const ::std::string& x)
{
  this->name_ = x;
  this->name_present_ = true;
}

bool AppState::
desc_present () const
{
  return this->desc_present_;
}

void AppState::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& AppState::
desc () const
{
  return this->desc_;
}

::std::string& AppState::
desc ()
{
  return this->desc_;
}

void AppState::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

const ::AppModes& AppState::
AppModes () const
{
  return *this->AppModes_;
}

::AppModes& AppState::
AppModes ()
{
  return *this->AppModes_;
}

void AppState::
AppModes (::AppModes* x)
{
  delete this->AppModes_;
  this->AppModes_ = x;
}

const ::ScreenObjects& AppState::
ScreenObjects () const
{
  return *this->ScreenObjects_;
}

::ScreenObjects& AppState::
ScreenObjects ()
{
  return *this->ScreenObjects_;
}

void AppState::
ScreenObjects (::ScreenObjects* x)
{
  delete this->ScreenObjects_;
  this->ScreenObjects_ = x;
}

// mode
//

bool mode::
id_present () const
{
  return this->id_present_;
}

void mode::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char mode::
id () const
{
  return this->id_;
}

signed char& mode::
id ()
{
  return this->id_;
}

void mode::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool mode::
desc_present () const
{
  return this->desc_present_;
}

void mode::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& mode::
desc () const
{
  return this->desc_;
}

::std::string& mode::
desc ()
{
  return this->desc_;
}

void mode::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

// AppModes
//

const AppModes::mode_sequence& AppModes::
mode () const
{
  return this->mode_;
}

AppModes::mode_sequence& AppModes::
mode ()
{
  return this->mode_;
}

// ScreenObjects
//

const ScreenObjects::LCDCharacterLine_sequence& ScreenObjects::
LCDCharacterLine () const
{
  return this->LCDCharacterLine_;
}

ScreenObjects::LCDCharacterLine_sequence& ScreenObjects::
LCDCharacterLine ()
{
  return this->LCDCharacterLine_;
}

// textObj
//

bool textObj::
id_present () const
{
  return this->id_present_;
}

void textObj::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char textObj::
id () const
{
  return this->id_;
}

signed char& textObj::
id ()
{
  return this->id_;
}

void textObj::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool textObj::
desc_present () const
{
  return this->desc_present_;
}

void textObj::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& textObj::
desc () const
{
  return this->desc_;
}

::std::string& textObj::
desc ()
{
  return this->desc_;
}

void textObj::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool textObj::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void textObj::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char textObj::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& textObj::
xpos_min ()
{
  return this->xpos_min_;
}

void textObj::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool textObj::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void textObj::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char textObj::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& textObj::
xpos_max ()
{
  return this->xpos_max_;
}

void textObj::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool textObj::
xcount_present () const
{
  return this->xcount_present_;
}

void textObj::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char textObj::
xcount () const
{
  return this->xcount_;
}

signed char& textObj::
xcount ()
{
  return this->xcount_;
}

void textObj::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

bool textObj::
align_present () const
{
  return this->align_present_;
}

void textObj::
align_present (bool x)
{
  this->align_present_ = x;
}

const ::std::string& textObj::
align () const
{
  return this->align_;
}

::std::string& textObj::
align ()
{
  return this->align_;
}

void textObj::
align (const ::std::string& x)
{
  this->align_ = x;
  this->align_present_ = true;
}

// durationValue
//

bool durationValue::
id_present () const
{
  return this->id_present_;
}

void durationValue::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char durationValue::
id () const
{
  return this->id_;
}

signed char& durationValue::
id ()
{
  return this->id_;
}

void durationValue::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool durationValue::
desc_present () const
{
  return this->desc_present_;
}

void durationValue::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& durationValue::
desc () const
{
  return this->desc_;
}

::std::string& durationValue::
desc ()
{
  return this->desc_;
}

void durationValue::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool durationValue::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void durationValue::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char durationValue::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& durationValue::
xpos_min ()
{
  return this->xpos_min_;
}

void durationValue::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool durationValue::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void durationValue::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char durationValue::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& durationValue::
xpos_max ()
{
  return this->xpos_max_;
}

void durationValue::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool durationValue::
xcount_present () const
{
  return this->xcount_present_;
}

void durationValue::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char durationValue::
xcount () const
{
  return this->xcount_;
}

signed char& durationValue::
xcount ()
{
  return this->xcount_;
}

void durationValue::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// dispUnit1
//

bool dispUnit1::
id_present () const
{
  return this->id_present_;
}

void dispUnit1::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char dispUnit1::
id () const
{
  return this->id_;
}

signed char& dispUnit1::
id ()
{
  return this->id_;
}

void dispUnit1::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool dispUnit1::
desc_present () const
{
  return this->desc_present_;
}

void dispUnit1::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& dispUnit1::
desc () const
{
  return this->desc_;
}

::std::string& dispUnit1::
desc ()
{
  return this->desc_;
}

void dispUnit1::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool dispUnit1::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void dispUnit1::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char dispUnit1::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& dispUnit1::
xpos_min ()
{
  return this->xpos_min_;
}

void dispUnit1::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool dispUnit1::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void dispUnit1::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char dispUnit1::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& dispUnit1::
xpos_max ()
{
  return this->xpos_max_;
}

void dispUnit1::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool dispUnit1::
xcount_present () const
{
  return this->xcount_present_;
}

void dispUnit1::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char dispUnit1::
xcount () const
{
  return this->xcount_;
}

signed char& dispUnit1::
xcount ()
{
  return this->xcount_;
}

void dispUnit1::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// DispDuration
//

bool DispDuration::
id_present () const
{
  return this->id_present_;
}

void DispDuration::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char DispDuration::
id () const
{
  return this->id_;
}

signed char& DispDuration::
id ()
{
  return this->id_;
}

void DispDuration::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

const ::durationValue& DispDuration::
durationValue () const
{
  return this->durationValue_;
}

::durationValue& DispDuration::
durationValue ()
{
  return this->durationValue_;
}

void DispDuration::
durationValue (const ::durationValue& x)
{
  this->durationValue_ = x;
}

const ::dispUnit1& DispDuration::
dispUnit () const
{
  return this->dispUnit_;
}

::dispUnit1& DispDuration::
dispUnit ()
{
  return this->dispUnit_;
}

void DispDuration::
dispUnit (const ::dispUnit1& x)
{
  this->dispUnit_ = x;
}

// DispIdentifier
//

bool DispIdentifier::
id_present () const
{
  return this->id_present_;
}

void DispIdentifier::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char DispIdentifier::
id () const
{
  return this->id_;
}

signed char& DispIdentifier::
id ()
{
  return this->id_;
}

void DispIdentifier::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool DispIdentifier::
desc_present () const
{
  return this->desc_present_;
}

void DispIdentifier::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& DispIdentifier::
desc () const
{
  return this->desc_;
}

::std::string& DispIdentifier::
desc ()
{
  return this->desc_;
}

void DispIdentifier::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool DispIdentifier::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void DispIdentifier::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char DispIdentifier::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& DispIdentifier::
xpos_min ()
{
  return this->xpos_min_;
}

void DispIdentifier::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool DispIdentifier::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void DispIdentifier::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char DispIdentifier::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& DispIdentifier::
xpos_max ()
{
  return this->xpos_max_;
}

void DispIdentifier::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool DispIdentifier::
xcount_present () const
{
  return this->xcount_present_;
}

void DispIdentifier::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char DispIdentifier::
xcount () const
{
  return this->xcount_;
}

signed char& DispIdentifier::
xcount ()
{
  return this->xcount_;
}

void DispIdentifier::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// dispUnit2
//

bool dispUnit2::
id_present () const
{
  return this->id_present_;
}

void dispUnit2::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char dispUnit2::
id () const
{
  return this->id_;
}

signed char& dispUnit2::
id ()
{
  return this->id_;
}

void dispUnit2::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool dispUnit2::
desc_present () const
{
  return this->desc_present_;
}

void dispUnit2::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& dispUnit2::
desc () const
{
  return this->desc_;
}

::std::string& dispUnit2::
desc ()
{
  return this->desc_;
}

void dispUnit2::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool dispUnit2::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void dispUnit2::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char dispUnit2::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& dispUnit2::
xpos_min ()
{
  return this->xpos_min_;
}

void dispUnit2::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool dispUnit2::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void dispUnit2::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char dispUnit2::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& dispUnit2::
xpos_max ()
{
  return this->xpos_max_;
}

void dispUnit2::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool dispUnit2::
xcount_present () const
{
  return this->xcount_present_;
}

void dispUnit2::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char dispUnit2::
xcount () const
{
  return this->xcount_;
}

signed char& dispUnit2::
xcount ()
{
  return this->xcount_;
}

void dispUnit2::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// dutyCycle
//

bool dutyCycle::
id_present () const
{
  return this->id_present_;
}

void dutyCycle::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char dutyCycle::
id () const
{
  return this->id_;
}

signed char& dutyCycle::
id ()
{
  return this->id_;
}

void dutyCycle::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool dutyCycle::
desc_present () const
{
  return this->desc_present_;
}

void dutyCycle::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& dutyCycle::
desc () const
{
  return this->desc_;
}

::std::string& dutyCycle::
desc ()
{
  return this->desc_;
}

void dutyCycle::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool dutyCycle::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void dutyCycle::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char dutyCycle::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& dutyCycle::
xpos_min ()
{
  return this->xpos_min_;
}

void dutyCycle::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool dutyCycle::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void dutyCycle::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char dutyCycle::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& dutyCycle::
xpos_max ()
{
  return this->xpos_max_;
}

void dutyCycle::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool dutyCycle::
xcount_present () const
{
  return this->xcount_present_;
}

void dutyCycle::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char dutyCycle::
xcount () const
{
  return this->xcount_;
}

signed char& dutyCycle::
xcount ()
{
  return this->xcount_;
}

void dutyCycle::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// DispDutyCycle
//

bool DispDutyCycle::
id_present () const
{
  return this->id_present_;
}

void DispDutyCycle::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char DispDutyCycle::
id () const
{
  return this->id_;
}

signed char& DispDutyCycle::
id ()
{
  return this->id_;
}

void DispDutyCycle::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

const ::dutyCycle& DispDutyCycle::
dutyCycle () const
{
  return this->dutyCycle_;
}

::dutyCycle& DispDutyCycle::
dutyCycle ()
{
  return this->dutyCycle_;
}

void DispDutyCycle::
dutyCycle (const ::dutyCycle& x)
{
  this->dutyCycle_ = x;
}

const ::dispUnit2& DispDutyCycle::
dispUnit () const
{
  return this->dispUnit_;
}

::dispUnit2& DispDutyCycle::
dispUnit ()
{
  return this->dispUnit_;
}

void DispDutyCycle::
dispUnit (const ::dispUnit2& x)
{
  this->dispUnit_ = x;
}

// dispUnit3
//

bool dispUnit3::
id_present () const
{
  return this->id_present_;
}

void dispUnit3::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char dispUnit3::
id () const
{
  return this->id_;
}

signed char& dispUnit3::
id ()
{
  return this->id_;
}

void dispUnit3::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool dispUnit3::
desc_present () const
{
  return this->desc_present_;
}

void dispUnit3::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& dispUnit3::
desc () const
{
  return this->desc_;
}

::std::string& dispUnit3::
desc ()
{
  return this->desc_;
}

void dispUnit3::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool dispUnit3::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void dispUnit3::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char dispUnit3::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& dispUnit3::
xpos_min ()
{
  return this->xpos_min_;
}

void dispUnit3::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool dispUnit3::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void dispUnit3::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char dispUnit3::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& dispUnit3::
xpos_max ()
{
  return this->xpos_max_;
}

void dispUnit3::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool dispUnit3::
xcount_present () const
{
  return this->xcount_present_;
}

void dispUnit3::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char dispUnit3::
xcount () const
{
  return this->xcount_;
}

signed char& dispUnit3::
xcount ()
{
  return this->xcount_;
}

void dispUnit3::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// voltageValue
//

bool voltageValue::
id_present () const
{
  return this->id_present_;
}

void voltageValue::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char voltageValue::
id () const
{
  return this->id_;
}

signed char& voltageValue::
id ()
{
  return this->id_;
}

void voltageValue::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool voltageValue::
desc_present () const
{
  return this->desc_present_;
}

void voltageValue::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& voltageValue::
desc () const
{
  return this->desc_;
}

::std::string& voltageValue::
desc ()
{
  return this->desc_;
}

void voltageValue::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool voltageValue::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void voltageValue::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char voltageValue::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& voltageValue::
xpos_min ()
{
  return this->xpos_min_;
}

void voltageValue::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool voltageValue::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void voltageValue::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char voltageValue::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& voltageValue::
xpos_max ()
{
  return this->xpos_max_;
}

void voltageValue::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool voltageValue::
xcount_present () const
{
  return this->xcount_present_;
}

void voltageValue::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char voltageValue::
xcount () const
{
  return this->xcount_;
}

signed char& voltageValue::
xcount ()
{
  return this->xcount_;
}

void voltageValue::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// DispVoltage
//

bool DispVoltage::
id_present () const
{
  return this->id_present_;
}

void DispVoltage::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char DispVoltage::
id () const
{
  return this->id_;
}

signed char& DispVoltage::
id ()
{
  return this->id_;
}

void DispVoltage::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

const ::voltageValue& DispVoltage::
voltageValue () const
{
  return this->voltageValue_;
}

::voltageValue& DispVoltage::
voltageValue ()
{
  return this->voltageValue_;
}

void DispVoltage::
voltageValue (const ::voltageValue& x)
{
  this->voltageValue_ = x;
}

const ::dispUnit3& DispVoltage::
dispUnit () const
{
  return this->dispUnit_;
}

::dispUnit3& DispVoltage::
dispUnit ()
{
  return this->dispUnit_;
}

void DispVoltage::
dispUnit (const ::dispUnit3& x)
{
  this->dispUnit_ = x;
}

// LCDCharacterLine
//

bool LCDCharacterLine::
num_present () const
{
  return this->num_present_;
}

void LCDCharacterLine::
num_present (bool x)
{
  this->num_present_ = x;
}

signed char LCDCharacterLine::
num () const
{
  return this->num_;
}

signed char& LCDCharacterLine::
num ()
{
  return this->num_;
}

void LCDCharacterLine::
num (signed char x)
{
  this->num_ = x;
  this->num_present_ = true;
}

bool LCDCharacterLine::
max_char_present () const
{
  return this->max_char_present_;
}

void LCDCharacterLine::
max_char_present (bool x)
{
  this->max_char_present_ = x;
}

signed char LCDCharacterLine::
max_char () const
{
  return this->max_char_;
}

signed char& LCDCharacterLine::
max_char ()
{
  return this->max_char_;
}

void LCDCharacterLine::
max_char (signed char x)
{
  this->max_char_ = x;
  this->max_char_present_ = true;
}

const LCDCharacterLine::choice_sequence& LCDCharacterLine::
choice () const
{
  return this->choice_;
}

LCDCharacterLine::choice_sequence& LCDCharacterLine::
choice ()
{
  return this->choice_;
}

LCDCharacterLine::choice_type::choice_arm_tag LCDCharacterLine::choice_type::
choice_arm () const
{
  return this->choice_arm_;
}

const ::DispTitle& LCDCharacterLine::choice_type::
DispTitle () const
{
  return *this->choice_.DispTitle_;
}

::DispTitle& LCDCharacterLine::choice_type::
DispTitle ()
{
  return *this->choice_.DispTitle_;
}

void LCDCharacterLine::choice_type::
DispTitle (::DispTitle* x)
{
  if (this->choice_arm_ != DispTitle_tag)
    this->choice_arm (DispTitle_tag);
  else
  {
    delete this->choice_.DispTitle_;
  }

  this->choice_.DispTitle_ = x;
}

const ::textObj& LCDCharacterLine::choice_type::
textObj () const
{
  return reinterpret_cast< const ::textObj& > (this->choice_.textObj_);
}

::textObj& LCDCharacterLine::choice_type::
textObj ()
{
  return reinterpret_cast< ::textObj& > (this->choice_.textObj_);
}

void LCDCharacterLine::choice_type::
textObj (const ::textObj& x)
{
  if (this->choice_arm_ != textObj_tag)
    this->choice_arm (textObj_tag);

  reinterpret_cast< ::textObj& > (this->choice_.textObj_) = x;
}

const ::DispFrequency& LCDCharacterLine::choice_type::
DispFrequency () const
{
  return *this->choice_.DispFrequency_;
}

::DispFrequency& LCDCharacterLine::choice_type::
DispFrequency ()
{
  return *this->choice_.DispFrequency_;
}

void LCDCharacterLine::choice_type::
DispFrequency (::DispFrequency* x)
{
  if (this->choice_arm_ != DispFrequency_tag)
    this->choice_arm (DispFrequency_tag);
  else
  {
    delete this->choice_.DispFrequency_;
  }

  this->choice_.DispFrequency_ = x;
}

const ::DispIdentifier& LCDCharacterLine::choice_type::
DispIdentifier () const
{
  return reinterpret_cast< const ::DispIdentifier& > (this->choice_.DispIdentifier_);
}

::DispIdentifier& LCDCharacterLine::choice_type::
DispIdentifier ()
{
  return reinterpret_cast< ::DispIdentifier& > (this->choice_.DispIdentifier_);
}

void LCDCharacterLine::choice_type::
DispIdentifier (const ::DispIdentifier& x)
{
  if (this->choice_arm_ != DispIdentifier_tag)
    this->choice_arm (DispIdentifier_tag);

  reinterpret_cast< ::DispIdentifier& > (this->choice_.DispIdentifier_) = x;
}

const ::DispDuration& LCDCharacterLine::choice_type::
DispDuration () const
{
  return reinterpret_cast< const ::DispDuration& > (this->choice_.DispDuration_);
}

::DispDuration& LCDCharacterLine::choice_type::
DispDuration ()
{
  return reinterpret_cast< ::DispDuration& > (this->choice_.DispDuration_);
}

void LCDCharacterLine::choice_type::
DispDuration (const ::DispDuration& x)
{
  if (this->choice_arm_ != DispDuration_tag)
    this->choice_arm (DispDuration_tag);

  reinterpret_cast< ::DispDuration& > (this->choice_.DispDuration_) = x;
}

const ::DispDutyCycle& LCDCharacterLine::choice_type::
DispDutyCycle () const
{
  return reinterpret_cast< const ::DispDutyCycle& > (this->choice_.DispDutyCycle_);
}

::DispDutyCycle& LCDCharacterLine::choice_type::
DispDutyCycle ()
{
  return reinterpret_cast< ::DispDutyCycle& > (this->choice_.DispDutyCycle_);
}

void LCDCharacterLine::choice_type::
DispDutyCycle (const ::DispDutyCycle& x)
{
  if (this->choice_arm_ != DispDutyCycle_tag)
    this->choice_arm (DispDutyCycle_tag);

  reinterpret_cast< ::DispDutyCycle& > (this->choice_.DispDutyCycle_) = x;
}

const ::DispVoltage& LCDCharacterLine::choice_type::
DispVoltage () const
{
  return reinterpret_cast< const ::DispVoltage& > (this->choice_.DispVoltage_);
}

::DispVoltage& LCDCharacterLine::choice_type::
DispVoltage ()
{
  return reinterpret_cast< ::DispVoltage& > (this->choice_.DispVoltage_);
}

void LCDCharacterLine::choice_type::
DispVoltage (const ::DispVoltage& x)
{
  if (this->choice_arm_ != DispVoltage_tag)
    this->choice_arm (DispVoltage_tag);

  reinterpret_cast< ::DispVoltage& > (this->choice_.DispVoltage_) = x;
}

// textObj1
//

bool textObj1::
id_present () const
{
  return this->id_present_;
}

void textObj1::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char textObj1::
id () const
{
  return this->id_;
}

signed char& textObj1::
id ()
{
  return this->id_;
}

void textObj1::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool textObj1::
desc_present () const
{
  return this->desc_present_;
}

void textObj1::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& textObj1::
desc () const
{
  return this->desc_;
}

::std::string& textObj1::
desc ()
{
  return this->desc_;
}

void textObj1::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool textObj1::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void textObj1::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char textObj1::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& textObj1::
xpos_min ()
{
  return this->xpos_min_;
}

void textObj1::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool textObj1::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void textObj1::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char textObj1::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& textObj1::
xpos_max ()
{
  return this->xpos_max_;
}

void textObj1::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool textObj1::
xcount_present () const
{
  return this->xcount_present_;
}

void textObj1::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char textObj1::
xcount () const
{
  return this->xcount_;
}

signed char& textObj1::
xcount ()
{
  return this->xcount_;
}

void textObj1::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

bool textObj1::
align_present () const
{
  return this->align_present_;
}

void textObj1::
align_present (bool x)
{
  this->align_present_ = x;
}

const ::std::string& textObj1::
align () const
{
  return this->align_;
}

::std::string& textObj1::
align ()
{
  return this->align_;
}

void textObj1::
align (const ::std::string& x)
{
  this->align_ = x;
  this->align_present_ = true;
}

// DispTitle
//

bool DispTitle::
id_present () const
{
  return this->id_present_;
}

void DispTitle::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char DispTitle::
id () const
{
  return this->id_;
}

signed char& DispTitle::
id ()
{
  return this->id_;
}

void DispTitle::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

const DispTitle::textObj_sequence& DispTitle::
textObj () const
{
  return this->textObj_;
}

DispTitle::textObj_sequence& DispTitle::
textObj ()
{
  return this->textObj_;
}

// freqValue
//

bool freqValue::
id_present () const
{
  return this->id_present_;
}

void freqValue::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char freqValue::
id () const
{
  return this->id_;
}

signed char& freqValue::
id ()
{
  return this->id_;
}

void freqValue::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool freqValue::
desc_present () const
{
  return this->desc_present_;
}

void freqValue::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& freqValue::
desc () const
{
  return this->desc_;
}

::std::string& freqValue::
desc ()
{
  return this->desc_;
}

void freqValue::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool freqValue::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void freqValue::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char freqValue::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& freqValue::
xpos_min ()
{
  return this->xpos_min_;
}

void freqValue::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool freqValue::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void freqValue::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char freqValue::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& freqValue::
xpos_max ()
{
  return this->xpos_max_;
}

void freqValue::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool freqValue::
xcount_present () const
{
  return this->xcount_present_;
}

void freqValue::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char freqValue::
xcount () const
{
  return this->xcount_;
}

signed char& freqValue::
xcount ()
{
  return this->xcount_;
}

void freqValue::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// dispUnit
//

bool dispUnit::
id_present () const
{
  return this->id_present_;
}

void dispUnit::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char dispUnit::
id () const
{
  return this->id_;
}

signed char& dispUnit::
id ()
{
  return this->id_;
}

void dispUnit::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool dispUnit::
desc_present () const
{
  return this->desc_present_;
}

void dispUnit::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& dispUnit::
desc () const
{
  return this->desc_;
}

::std::string& dispUnit::
desc ()
{
  return this->desc_;
}

void dispUnit::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool dispUnit::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void dispUnit::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char dispUnit::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& dispUnit::
xpos_min ()
{
  return this->xpos_min_;
}

void dispUnit::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool dispUnit::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void dispUnit::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char dispUnit::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& dispUnit::
xpos_max ()
{
  return this->xpos_max_;
}

void dispUnit::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool dispUnit::
xcount_present () const
{
  return this->xcount_present_;
}

void dispUnit::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char dispUnit::
xcount () const
{
  return this->xcount_;
}

signed char& dispUnit::
xcount ()
{
  return this->xcount_;
}

void dispUnit::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

// DispFrequency
//

bool DispFrequency::
id_present () const
{
  return this->id_present_;
}

void DispFrequency::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char DispFrequency::
id () const
{
  return this->id_;
}

signed char& DispFrequency::
id ()
{
  return this->id_;
}

void DispFrequency::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool DispFrequency::
desc_present () const
{
  return this->desc_present_;
}

void DispFrequency::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& DispFrequency::
desc () const
{
  return this->desc_;
}

::std::string& DispFrequency::
desc ()
{
  return this->desc_;
}

void DispFrequency::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool DispFrequency::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void DispFrequency::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char DispFrequency::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& DispFrequency::
xpos_min ()
{
  return this->xpos_min_;
}

void DispFrequency::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool DispFrequency::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void DispFrequency::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char DispFrequency::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& DispFrequency::
xpos_max ()
{
  return this->xpos_max_;
}

void DispFrequency::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool DispFrequency::
xcount_present () const
{
  return this->xcount_present_;
}

void DispFrequency::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char DispFrequency::
xcount () const
{
  return this->xcount_;
}

signed char& DispFrequency::
xcount ()
{
  return this->xcount_;
}

void DispFrequency::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

bool DispFrequency::
freqValue_present () const
{
  return this->freqValue_present_;
}

void DispFrequency::
freqValue_present (bool x)
{
  this->freqValue_present_ = x;
}

const ::freqValue& DispFrequency::
freqValue () const
{
  return this->freqValue_;
}

::freqValue& DispFrequency::
freqValue ()
{
  return this->freqValue_;
}

void DispFrequency::
freqValue (const ::freqValue& x)
{
  this->freqValue_ = x;
  this->freqValue_present_ = true;
}

bool DispFrequency::
unitPrefix_present () const
{
  return this->unitPrefix_ != 0;
}

const ::unitPrefix& DispFrequency::
unitPrefix () const
{
  return *this->unitPrefix_;
}

::unitPrefix& DispFrequency::
unitPrefix ()
{
  return *this->unitPrefix_;
}

void DispFrequency::
unitPrefix (::unitPrefix* x)
{
  delete this->unitPrefix_;
  this->unitPrefix_ = x;
}

bool DispFrequency::
dispUnit_present () const
{
  return this->dispUnit_present_;
}

void DispFrequency::
dispUnit_present (bool x)
{
  this->dispUnit_present_ = x;
}

const ::dispUnit& DispFrequency::
dispUnit () const
{
  return this->dispUnit_;
}

::dispUnit& DispFrequency::
dispUnit ()
{
  return this->dispUnit_;
}

void DispFrequency::
dispUnit (const ::dispUnit& x)
{
  this->dispUnit_ = x;
  this->dispUnit_present_ = true;
}

// prefix
//

bool prefix::
id_present () const
{
  return this->id_present_;
}

void prefix::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char prefix::
id () const
{
  return this->id_;
}

signed char& prefix::
id ()
{
  return this->id_;
}

void prefix::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool prefix::
desc_present () const
{
  return this->desc_present_;
}

void prefix::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& prefix::
desc () const
{
  return this->desc_;
}

::std::string& prefix::
desc ()
{
  return this->desc_;
}

void prefix::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool prefix::
default_value_present () const
{
  return this->default_value_present_;
}

void prefix::
default_value_present (bool x)
{
  this->default_value_present_ = x;
}

const ::std::string& prefix::
default_value () const
{
  return this->default_value_;
}

::std::string& prefix::
default_value ()
{
  return this->default_value_;
}

void prefix::
default_value (const ::std::string& x)
{
  this->default_value_ = x;
  this->default_value_present_ = true;
}

// unitPrefix
//

bool unitPrefix::
id_present () const
{
  return this->id_present_;
}

void unitPrefix::
id_present (bool x)
{
  this->id_present_ = x;
}

signed char unitPrefix::
id () const
{
  return this->id_;
}

signed char& unitPrefix::
id ()
{
  return this->id_;
}

void unitPrefix::
id (signed char x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool unitPrefix::
desc_present () const
{
  return this->desc_present_;
}

void unitPrefix::
desc_present (bool x)
{
  this->desc_present_ = x;
}

const ::std::string& unitPrefix::
desc () const
{
  return this->desc_;
}

::std::string& unitPrefix::
desc ()
{
  return this->desc_;
}

void unitPrefix::
desc (const ::std::string& x)
{
  this->desc_ = x;
  this->desc_present_ = true;
}

bool unitPrefix::
xpos_min_present () const
{
  return this->xpos_min_present_;
}

void unitPrefix::
xpos_min_present (bool x)
{
  this->xpos_min_present_ = x;
}

signed char unitPrefix::
xpos_min () const
{
  return this->xpos_min_;
}

signed char& unitPrefix::
xpos_min ()
{
  return this->xpos_min_;
}

void unitPrefix::
xpos_min (signed char x)
{
  this->xpos_min_ = x;
  this->xpos_min_present_ = true;
}

bool unitPrefix::
xpos_max_present () const
{
  return this->xpos_max_present_;
}

void unitPrefix::
xpos_max_present (bool x)
{
  this->xpos_max_present_ = x;
}

signed char unitPrefix::
xpos_max () const
{
  return this->xpos_max_;
}

signed char& unitPrefix::
xpos_max ()
{
  return this->xpos_max_;
}

void unitPrefix::
xpos_max (signed char x)
{
  this->xpos_max_ = x;
  this->xpos_max_present_ = true;
}

bool unitPrefix::
xcount_present () const
{
  return this->xcount_present_;
}

void unitPrefix::
xcount_present (bool x)
{
  this->xcount_present_ = x;
}

signed char unitPrefix::
xcount () const
{
  return this->xcount_;
}

signed char& unitPrefix::
xcount ()
{
  return this->xcount_;
}

void unitPrefix::
xcount (signed char x)
{
  this->xcount_ = x;
  this->xcount_present_ = true;
}

bool unitPrefix::
mode_present () const
{
  return this->mode_present_;
}

void unitPrefix::
mode_present (bool x)
{
  this->mode_present_ = x;
}

const ::std::string& unitPrefix::
mode () const
{
  return this->mode_;
}

::std::string& unitPrefix::
mode ()
{
  return this->mode_;
}

void unitPrefix::
mode (const ::std::string& x)
{
  this->mode_ = x;
  this->mode_present_ = true;
}

bool unitPrefix::
selected_present () const
{
  return this->selected_present_;
}

void unitPrefix::
selected_present (bool x)
{
  this->selected_present_ = x;
}

signed char unitPrefix::
selected () const
{
  return this->selected_;
}

signed char& unitPrefix::
selected ()
{
  return this->selected_;
}

void unitPrefix::
selected (signed char x)
{
  this->selected_ = x;
  this->selected_present_ = true;
}

const unitPrefix::prefix_sequence& unitPrefix::
prefix () const
{
  return this->prefix_;
}

unitPrefix::prefix_sequence& unitPrefix::
prefix ()
{
  return this->prefix_;
}

#include <stdlib.h>
#include <new>

// UIXConfig
//

UIXConfig::
UIXConfig ()
{
  this->locale_present_ = false;
  this->ApplicationStates_ = 0;
}

UIXConfig::
~UIXConfig ()
{
  delete this->ApplicationStates_;
}

// ApplicationStates
//

ApplicationStates::
ApplicationStates ()
{
}

ApplicationStates::
~ApplicationStates ()
{
}

// AppState
//

AppState::
AppState ()
{
  this->id_present_ = false;
  this->name_present_ = false;
  this->desc_present_ = false;
  this->AppModes_ = 0;
  this->ScreenObjects_ = 0;
}

AppState::
~AppState ()
{
  delete this->AppModes_;
  delete this->ScreenObjects_;
}

// mode
//

mode::
mode ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
}

mode::
~mode ()
{
}

mode::
mode (const mode& x)
: ::xml_schema::byte_base (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
}

mode& mode::
operator= (const mode& x)
{
  XSDE_UNUSED (x);
  static_cast< ::xml_schema::byte_base& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  return *this;
}

// AppModes
//

AppModes::
AppModes ()
{
}

AppModes::
~AppModes ()
{
}

// ScreenObjects
//

ScreenObjects::
ScreenObjects ()
{
}

ScreenObjects::
~ScreenObjects ()
{
}

// textObj
//

textObj::
textObj ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
  this->align_present_ = false;
}

textObj::
~textObj ()
{
}

textObj::
textObj (const textObj& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  this->align_present_ = x.align_present_;
  if (this->align_present_)
    this->align_ = x.align_;
}

textObj& textObj::
operator= (const textObj& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  this->align_present_ = x.align_present_;
  if (this->align_present_)
    this->align_ = x.align_;
  return *this;
}

// durationValue
//

durationValue::
durationValue ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

durationValue::
~durationValue ()
{
}

durationValue::
durationValue (const durationValue& x)
: ::xml_schema::byte_base (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

durationValue& durationValue::
operator= (const durationValue& x)
{
  XSDE_UNUSED (x);
  static_cast< ::xml_schema::byte_base& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// dispUnit1
//

dispUnit1::
dispUnit1 ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

dispUnit1::
~dispUnit1 ()
{
}

dispUnit1::
dispUnit1 (const dispUnit1& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

dispUnit1& dispUnit1::
operator= (const dispUnit1& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// DispDuration
//

DispDuration::
DispDuration ()
{
  this->id_present_ = false;
}

DispDuration::
~DispDuration ()
{
}

DispDuration::
DispDuration (const DispDuration& x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->durationValue_ = x.durationValue_;
  this->dispUnit_ = x.dispUnit_;
}

DispDuration& DispDuration::
operator= (const DispDuration& x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->durationValue_ = x.durationValue_;
  this->dispUnit_ = x.dispUnit_;
  return *this;
}

// DispIdentifier
//

DispIdentifier::
DispIdentifier ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

DispIdentifier::
~DispIdentifier ()
{
}

DispIdentifier::
DispIdentifier (const DispIdentifier& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

DispIdentifier& DispIdentifier::
operator= (const DispIdentifier& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// dispUnit2
//

dispUnit2::
dispUnit2 ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

dispUnit2::
~dispUnit2 ()
{
}

dispUnit2::
dispUnit2 (const dispUnit2& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

dispUnit2& dispUnit2::
operator= (const dispUnit2& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// dutyCycle
//

dutyCycle::
dutyCycle ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

dutyCycle::
~dutyCycle ()
{
}

dutyCycle::
dutyCycle (const dutyCycle& x)
: ::xml_schema::float_base (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

dutyCycle& dutyCycle::
operator= (const dutyCycle& x)
{
  XSDE_UNUSED (x);
  static_cast< ::xml_schema::float_base& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// DispDutyCycle
//

DispDutyCycle::
DispDutyCycle ()
{
  this->id_present_ = false;
}

DispDutyCycle::
~DispDutyCycle ()
{
}

DispDutyCycle::
DispDutyCycle (const DispDutyCycle& x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->dutyCycle_ = x.dutyCycle_;
  this->dispUnit_ = x.dispUnit_;
}

DispDutyCycle& DispDutyCycle::
operator= (const DispDutyCycle& x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->dutyCycle_ = x.dutyCycle_;
  this->dispUnit_ = x.dispUnit_;
  return *this;
}

// dispUnit3
//

dispUnit3::
dispUnit3 ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

dispUnit3::
~dispUnit3 ()
{
}

dispUnit3::
dispUnit3 (const dispUnit3& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

dispUnit3& dispUnit3::
operator= (const dispUnit3& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// voltageValue
//

voltageValue::
voltageValue ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

voltageValue::
~voltageValue ()
{
}

voltageValue::
voltageValue (const voltageValue& x)
: ::xml_schema::float_base (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

voltageValue& voltageValue::
operator= (const voltageValue& x)
{
  XSDE_UNUSED (x);
  static_cast< ::xml_schema::float_base& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// DispVoltage
//

DispVoltage::
DispVoltage ()
{
  this->id_present_ = false;
}

DispVoltage::
~DispVoltage ()
{
}

DispVoltage::
DispVoltage (const DispVoltage& x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->voltageValue_ = x.voltageValue_;
  this->dispUnit_ = x.dispUnit_;
}

DispVoltage& DispVoltage::
operator= (const DispVoltage& x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->voltageValue_ = x.voltageValue_;
  this->dispUnit_ = x.dispUnit_;
  return *this;
}

// LCDCharacterLine
//

LCDCharacterLine::
LCDCharacterLine ()
{
  this->num_present_ = false;
  this->max_char_present_ = false;
}

LCDCharacterLine::
~LCDCharacterLine ()
{
}

LCDCharacterLine::choice_type::
choice_type ()
{
  this->choice_arm_ = choice_arm_tag (7);
}

LCDCharacterLine::choice_type::
~choice_type ()
{
  this->choice_arm (choice_arm_tag (7));
}

void LCDCharacterLine::choice_type::
choice_arm (choice_arm_tag x)
{
  if (this->choice_arm_ == x)
    return;

  switch (this->choice_arm_)
  {
    case DispTitle_tag:
    {
      delete this->choice_.DispTitle_;
      break;
    }
    case textObj_tag:
    {
      typedef ::textObj _dtor;
      reinterpret_cast< ::textObj& > (this->choice_.textObj_).~_dtor ();
      break;
    }
    case DispFrequency_tag:
    {
      delete this->choice_.DispFrequency_;
      break;
    }
    case DispIdentifier_tag:
    {
      typedef ::DispIdentifier _dtor;
      reinterpret_cast< ::DispIdentifier& > (this->choice_.DispIdentifier_).~_dtor ();
      break;
    }
    case DispDuration_tag:
    {
      typedef ::DispDuration _dtor;
      reinterpret_cast< ::DispDuration& > (this->choice_.DispDuration_).~_dtor ();
      break;
    }
    case DispDutyCycle_tag:
    {
      typedef ::DispDutyCycle _dtor;
      reinterpret_cast< ::DispDutyCycle& > (this->choice_.DispDutyCycle_).~_dtor ();
      break;
    }
    case DispVoltage_tag:
    {
      typedef ::DispVoltage _dtor;
      reinterpret_cast< ::DispVoltage& > (this->choice_.DispVoltage_).~_dtor ();
      break;
    }
    default:
    break;
  }

  this->choice_arm_ = choice_arm_tag (7);

  switch (x)
  {
    case DispTitle_tag:
    {
      this->choice_.DispTitle_ = 0;
      break;
    }
    case textObj_tag:
    {
      new (&this->choice_.textObj_) ::textObj;
      break;
    }
    case DispFrequency_tag:
    {
      this->choice_.DispFrequency_ = 0;
      break;
    }
    case DispIdentifier_tag:
    {
      new (&this->choice_.DispIdentifier_) ::DispIdentifier;
      break;
    }
    case DispDuration_tag:
    {
      new (&this->choice_.DispDuration_) ::DispDuration;
      break;
    }
    case DispDutyCycle_tag:
    {
      new (&this->choice_.DispDutyCycle_) ::DispDutyCycle;
      break;
    }
    case DispVoltage_tag:
    {
      new (&this->choice_.DispVoltage_) ::DispVoltage;
      break;
    }
    default:
    break;
  }

  this->choice_arm_ = x;
}

// textObj1
//

textObj1::
textObj1 ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
  this->align_present_ = false;
}

textObj1::
~textObj1 ()
{
}

textObj1::
textObj1 (const textObj1& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  this->align_present_ = x.align_present_;
  if (this->align_present_)
    this->align_ = x.align_;
}

textObj1& textObj1::
operator= (const textObj1& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  this->align_present_ = x.align_present_;
  if (this->align_present_)
    this->align_ = x.align_;
  return *this;
}

// DispTitle
//

DispTitle::
DispTitle ()
{
  this->id_present_ = false;
}

DispTitle::
~DispTitle ()
{
}

// freqValue
//

freqValue::
freqValue ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

freqValue::
~freqValue ()
{
}

freqValue::
freqValue (const freqValue& x)
: ::xml_schema::float_base (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

freqValue& freqValue::
operator= (const freqValue& x)
{
  XSDE_UNUSED (x);
  static_cast< ::xml_schema::float_base& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// dispUnit
//

dispUnit::
dispUnit ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
}

dispUnit::
~dispUnit ()
{
}

dispUnit::
dispUnit (const dispUnit& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
}

dispUnit& dispUnit::
operator= (const dispUnit& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->xpos_min_present_ = x.xpos_min_present_;
  if (this->xpos_min_present_)
    this->xpos_min_ = x.xpos_min_;
  this->xpos_max_present_ = x.xpos_max_present_;
  if (this->xpos_max_present_)
    this->xpos_max_ = x.xpos_max_;
  this->xcount_present_ = x.xcount_present_;
  if (this->xcount_present_)
    this->xcount_ = x.xcount_;
  return *this;
}

// DispFrequency
//

DispFrequency::
DispFrequency ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
  this->freqValue_present_ = false;
  this->unitPrefix_ = 0;
  this->dispUnit_present_ = false;
}

DispFrequency::
~DispFrequency ()
{
  delete this->unitPrefix_;
}

// prefix
//

prefix::
prefix ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->default_value_present_ = false;
}

prefix::
~prefix ()
{
}

prefix::
prefix (const prefix& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->default_value_present_ = x.default_value_present_;
  if (this->default_value_present_)
    this->default_value_ = x.default_value_;
}

prefix& prefix::
operator= (const prefix& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_present_ = x.id_present_;
  if (this->id_present_)
    this->id_ = x.id_;
  this->desc_present_ = x.desc_present_;
  if (this->desc_present_)
    this->desc_ = x.desc_;
  this->default_value_present_ = x.default_value_present_;
  if (this->default_value_present_)
    this->default_value_ = x.default_value_;
  return *this;
}

// unitPrefix
//

unitPrefix::
unitPrefix ()
{
  this->id_present_ = false;
  this->desc_present_ = false;
  this->xpos_min_present_ = false;
  this->xpos_max_present_ = false;
  this->xcount_present_ = false;
  this->mode_present_ = false;
  this->selected_present_ = false;
}

unitPrefix::
~unitPrefix ()
{
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

