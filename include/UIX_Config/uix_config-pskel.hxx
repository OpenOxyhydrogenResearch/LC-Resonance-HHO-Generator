// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef SRC_LOCALE_EN_JM_UIX_CONFIG_PSKEL_HXX
#define SRC_LOCALE_EN_JM_UIX_CONFIG_PSKEL_HXX

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
class UIXConfig_pskel;
class ApplicationStates_pskel;
class AppState_pskel;
class mode_pskel;
class AppModes_pskel;
class ScreenObjects_pskel;
class textObj_pskel;
class durationValue_pskel;
class dispUnit1_pskel;
class DispDuration_pskel;
class DispIdentifier_pskel;
class dispUnit2_pskel;
class dutyCycle_pskel;
class DispDutyCycle_pskel;
class dispUnit3_pskel;
class voltageValue_pskel;
class DispVoltage_pskel;
class LCDCharacterLine_pskel;
class textObj1_pskel;
class DispTitle_pskel;
class freqValue_pskel;
class dispUnit_pskel;
class DispFrequency_pskel;
class prefix_pskel;
class unitPrefix_pskel;

#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "uix_config.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

class UIXConfig_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  locale (const ::std::string&);

  // Elements.
  //
  virtual void
  ApplicationStates (::ApplicationStates*);

  virtual ::UIXConfig*
  post_UIXConfig () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* locale */,
           ::ApplicationStates_pskel& /* ApplicationStates */);

  // Individual attribute parsers.
  //
  void
  locale_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  ApplicationStates_parser (::ApplicationStates_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  UIXConfig_pskel ();

  // Implementation details.
  //
  protected:
  UIXConfig_pskel* UIXConfig_impl_;
  UIXConfig_pskel (UIXConfig_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* locale_parser_;
  ::ApplicationStates_pskel* ApplicationStates_parser_;

  public:
  struct v_state_descr_
  {
    void (::UIXConfig_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class ApplicationStates_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  AppState (::AppState*);

  virtual ::ApplicationStates*
  post_ApplicationStates () = 0;

  // Parser construction API.
  //
  void
  parsers (::AppState_pskel& /* AppState */);

  // Individual element parsers.
  //
  void
  AppState_parser (::AppState_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  ApplicationStates_pskel ();

  // Implementation details.
  //
  protected:
  ApplicationStates_pskel* ApplicationStates_impl_;
  ApplicationStates_pskel (ApplicationStates_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::AppState_pskel* AppState_parser_;

  public:
  struct v_state_descr_
  {
    void (::ApplicationStates_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class AppState_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  name (const ::std::string&);

  virtual void
  desc (const ::std::string&);

  // Elements.
  //
  virtual void
  AppModes (::AppModes*);

  virtual void
  ScreenObjects (::ScreenObjects*);

  virtual ::AppState*
  post_AppState () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* desc */,
           ::AppModes_pskel& /* AppModes */,
           ::ScreenObjects_pskel& /* ScreenObjects */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  AppModes_parser (::AppModes_pskel&);

  void
  ScreenObjects_parser (::ScreenObjects_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  AppState_pskel ();

  // Implementation details.
  //
  protected:
  AppState_pskel* AppState_impl_;
  AppState_pskel (AppState_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::AppModes_pskel* AppModes_parser_;
  ::ScreenObjects_pskel* ScreenObjects_parser_;

  public:
  struct v_state_descr_
  {
    void (::AppState_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class mode_pskel: public ::xml_schema::byte_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual ::mode
  post_mode () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  mode_pskel (::xml_schema::byte_pskel* tiein);

  // Implementation details.
  //
  virtual signed char
  post_byte ();

  protected:
  mode_pskel* mode_impl_;
  mode_pskel (mode_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
};

class AppModes_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  mode (const ::mode&);

  virtual ::AppModes*
  post_AppModes () = 0;

  // Parser construction API.
  //
  void
  parsers (::mode_pskel& /* mode */);

  // Individual element parsers.
  //
  void
  mode_parser (::mode_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  AppModes_pskel ();

  // Implementation details.
  //
  protected:
  AppModes_pskel* AppModes_impl_;
  AppModes_pskel (AppModes_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::mode_pskel* mode_parser_;

  public:
  struct v_state_descr_
  {
    void (::AppModes_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class ScreenObjects_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  LCDCharacterLine (::LCDCharacterLine*);

  virtual ::ScreenObjects*
  post_ScreenObjects () = 0;

  // Parser construction API.
  //
  void
  parsers (::LCDCharacterLine_pskel& /* LCDCharacterLine */);

  // Individual element parsers.
  //
  void
  LCDCharacterLine_parser (::LCDCharacterLine_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  ScreenObjects_pskel ();

  // Implementation details.
  //
  protected:
  ScreenObjects_pskel* ScreenObjects_impl_;
  ScreenObjects_pskel (ScreenObjects_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::LCDCharacterLine_pskel* LCDCharacterLine_parser_;

  public:
  struct v_state_descr_
  {
    void (::ScreenObjects_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class textObj_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual void
  align (const ::std::string&);

  virtual ::textObj
  post_textObj () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */,
           ::xml_schema::string_pskel& /* align */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  void
  align_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  textObj_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  textObj_pskel* textObj_impl_;
  textObj_pskel (textObj_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
  ::xml_schema::string_pskel* align_parser_;
};

class durationValue_pskel: public ::xml_schema::byte_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::durationValue
  post_durationValue () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  durationValue_pskel (::xml_schema::byte_pskel* tiein);

  // Implementation details.
  //
  virtual signed char
  post_byte ();

  protected:
  durationValue_pskel* durationValue_impl_;
  durationValue_pskel (durationValue_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class dispUnit1_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit1
  post_dispUnit1 () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  dispUnit1_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  dispUnit1_pskel* dispUnit1_impl_;
  dispUnit1_pskel (dispUnit1_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class DispDuration_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  durationValue (const ::durationValue&);

  virtual void
  dispUnit (const ::dispUnit1&);

  virtual ::DispDuration
  post_DispDuration () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::durationValue_pskel& /* durationValue */,
           ::dispUnit1_pskel& /* dispUnit */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  durationValue_parser (::durationValue_pskel&);

  void
  dispUnit_parser (::dispUnit1_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DispDuration_pskel ();

  // Implementation details.
  //
  protected:
  DispDuration_pskel* DispDuration_impl_;
  DispDuration_pskel (DispDuration_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::durationValue_pskel* durationValue_parser_;
  ::dispUnit1_pskel* dispUnit_parser_;

  public:
  struct v_state_descr_
  {
    void (::DispDuration_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class DispIdentifier_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::DispIdentifier
  post_DispIdentifier () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DispIdentifier_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  DispIdentifier_pskel* DispIdentifier_impl_;
  DispIdentifier_pskel (DispIdentifier_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class dispUnit2_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit2
  post_dispUnit2 () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  dispUnit2_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  dispUnit2_pskel* dispUnit2_impl_;
  dispUnit2_pskel (dispUnit2_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class dutyCycle_pskel: public ::xml_schema::float_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dutyCycle
  post_dutyCycle () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  dutyCycle_pskel (::xml_schema::float_pskel* tiein);

  // Implementation details.
  //
  virtual float
  post_float ();

  protected:
  dutyCycle_pskel* dutyCycle_impl_;
  dutyCycle_pskel (dutyCycle_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class DispDutyCycle_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  dutyCycle (const ::dutyCycle&);

  virtual void
  dispUnit (const ::dispUnit2&);

  virtual ::DispDutyCycle
  post_DispDutyCycle () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::dutyCycle_pskel& /* dutyCycle */,
           ::dispUnit2_pskel& /* dispUnit */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  dutyCycle_parser (::dutyCycle_pskel&);

  void
  dispUnit_parser (::dispUnit2_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DispDutyCycle_pskel ();

  // Implementation details.
  //
  protected:
  DispDutyCycle_pskel* DispDutyCycle_impl_;
  DispDutyCycle_pskel (DispDutyCycle_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::dutyCycle_pskel* dutyCycle_parser_;
  ::dispUnit2_pskel* dispUnit_parser_;

  public:
  struct v_state_descr_
  {
    void (::DispDutyCycle_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class dispUnit3_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit3
  post_dispUnit3 () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  dispUnit3_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  dispUnit3_pskel* dispUnit3_impl_;
  dispUnit3_pskel (dispUnit3_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class voltageValue_pskel: public ::xml_schema::float_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::voltageValue
  post_voltageValue () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  voltageValue_pskel (::xml_schema::float_pskel* tiein);

  // Implementation details.
  //
  virtual float
  post_float ();

  protected:
  voltageValue_pskel* voltageValue_impl_;
  voltageValue_pskel (voltageValue_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class DispVoltage_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  voltageValue (const ::voltageValue&);

  virtual void
  dispUnit (const ::dispUnit3&);

  virtual ::DispVoltage
  post_DispVoltage () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::voltageValue_pskel& /* voltageValue */,
           ::dispUnit3_pskel& /* dispUnit */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  voltageValue_parser (::voltageValue_pskel&);

  void
  dispUnit_parser (::dispUnit3_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DispVoltage_pskel ();

  // Implementation details.
  //
  protected:
  DispVoltage_pskel* DispVoltage_impl_;
  DispVoltage_pskel (DispVoltage_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::voltageValue_pskel* voltageValue_parser_;
  ::dispUnit3_pskel* dispUnit_parser_;

  public:
  struct v_state_descr_
  {
    void (::DispVoltage_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class LCDCharacterLine_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  num (signed char);

  virtual void
  max_char (signed char);

  // Elements.
  //
  enum choice_arm_tag
  {
    DispTitle_tag,
    textObj_tag,
    DispFrequency_tag,
    DispIdentifier_tag,
    DispDuration_tag,
    DispDutyCycle_tag,
    DispVoltage_tag
  };

  virtual void
  choice_arm (choice_arm_tag);

  virtual void
  DispTitle (::DispTitle*);

  virtual void
  textObj (const ::textObj&);

  virtual void
  DispFrequency (::DispFrequency*);

  virtual void
  DispIdentifier (const ::DispIdentifier&);

  virtual void
  DispDuration (const ::DispDuration&);

  virtual void
  DispDutyCycle (const ::DispDutyCycle&);

  virtual void
  DispVoltage (const ::DispVoltage&);

  virtual ::LCDCharacterLine*
  post_LCDCharacterLine () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* num */,
           ::xml_schema::byte_pskel& /* max_char */,
           ::DispTitle_pskel& /* DispTitle */,
           ::textObj_pskel& /* textObj */,
           ::DispFrequency_pskel& /* DispFrequency */,
           ::DispIdentifier_pskel& /* DispIdentifier */,
           ::DispDuration_pskel& /* DispDuration */,
           ::DispDutyCycle_pskel& /* DispDutyCycle */,
           ::DispVoltage_pskel& /* DispVoltage */);

  // Individual attribute parsers.
  //
  void
  num_parser (::xml_schema::byte_pskel&);

  void
  max_char_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  DispTitle_parser (::DispTitle_pskel&);

  void
  textObj_parser (::textObj_pskel&);

  void
  DispFrequency_parser (::DispFrequency_pskel&);

  void
  DispIdentifier_parser (::DispIdentifier_pskel&);

  void
  DispDuration_parser (::DispDuration_pskel&);

  void
  DispDutyCycle_parser (::DispDutyCycle_pskel&);

  void
  DispVoltage_parser (::DispVoltage_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  LCDCharacterLine_pskel ();

  // Implementation details.
  //
  protected:
  LCDCharacterLine_pskel* LCDCharacterLine_impl_;
  LCDCharacterLine_pskel (LCDCharacterLine_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* num_parser_;
  ::xml_schema::byte_pskel* max_char_parser_;
  ::DispTitle_pskel* DispTitle_parser_;
  ::textObj_pskel* textObj_parser_;
  ::DispFrequency_pskel* DispFrequency_parser_;
  ::DispIdentifier_pskel* DispIdentifier_parser_;
  ::DispDuration_pskel* DispDuration_parser_;
  ::DispDutyCycle_pskel* DispDutyCycle_parser_;
  ::DispVoltage_pskel* DispVoltage_parser_;

  public:
  struct v_state_descr_
  {
    void (::LCDCharacterLine_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  choice_0 (unsigned long&,
            unsigned long&,
            const ::xsde::cxx::ro_string&,
            const ::xsde::cxx::ro_string&,
            bool);
};

class textObj1_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual void
  align (const ::std::string&);

  virtual ::textObj1
  post_textObj1 () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */,
           ::xml_schema::string_pskel& /* align */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  void
  align_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  textObj1_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  textObj1_pskel* textObj1_impl_;
  textObj1_pskel (textObj1_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
  ::xml_schema::string_pskel* align_parser_;
};

class DispTitle_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  textObj (const ::textObj1&);

  virtual ::DispTitle*
  post_DispTitle () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::textObj1_pskel& /* textObj */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  textObj_parser (::textObj1_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DispTitle_pskel ();

  // Implementation details.
  //
  protected:
  DispTitle_pskel* DispTitle_impl_;
  DispTitle_pskel (DispTitle_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::textObj1_pskel* textObj_parser_;

  public:
  struct v_state_descr_
  {
    void (::DispTitle_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class freqValue_pskel: public ::xml_schema::float_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::freqValue
  post_freqValue () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  freqValue_pskel (::xml_schema::float_pskel* tiein);

  // Implementation details.
  //
  virtual float
  post_float ();

  protected:
  freqValue_pskel* freqValue_impl_;
  freqValue_pskel (freqValue_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class dispUnit_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit
  post_dispUnit () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  dispUnit_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  dispUnit_pskel* dispUnit_impl_;
  dispUnit_pskel (dispUnit_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
};

class DispFrequency_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  // Elements.
  //
  virtual void
  freqValue (const ::freqValue&);

  virtual void
  unitPrefix (::unitPrefix*);

  virtual void
  dispUnit (const ::dispUnit&);

  virtual ::DispFrequency*
  post_DispFrequency () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */,
           ::freqValue_pskel& /* freqValue */,
           ::unitPrefix_pskel& /* unitPrefix */,
           ::dispUnit_pskel& /* dispUnit */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  freqValue_parser (::freqValue_pskel&);

  void
  unitPrefix_parser (::unitPrefix_pskel&);

  void
  dispUnit_parser (::dispUnit_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  DispFrequency_pskel ();

  // Implementation details.
  //
  protected:
  DispFrequency_pskel* DispFrequency_impl_;
  DispFrequency_pskel (DispFrequency_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  virtual bool
  _characters_impl (const ::xsde::cxx::ro_string&);

  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
  ::freqValue_pskel* freqValue_parser_;
  ::unitPrefix_pskel* unitPrefix_parser_;
  ::dispUnit_pskel* dispUnit_parser_;

  public:
  struct v_state_descr_
  {
    void (::DispFrequency_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class prefix_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  default_value (const ::std::string&);

  virtual ::prefix
  post_prefix () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::string_pskel& /* default_value */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  default_value_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  prefix_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  prefix_pskel* prefix_impl_;
  prefix_pskel (prefix_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::string_pskel* default_value_parser_;
};

class unitPrefix_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual void
  mode (const ::std::string&);

  virtual void
  selected (signed char);

  // Elements.
  //
  virtual void
  prefix (const ::prefix&);

  virtual ::unitPrefix*
  post_unitPrefix () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* id */,
           ::xml_schema::string_pskel& /* desc */,
           ::xml_schema::byte_pskel& /* xpos_min */,
           ::xml_schema::byte_pskel& /* xpos_max */,
           ::xml_schema::byte_pskel& /* xcount */,
           ::xml_schema::string_pskel& /* mode */,
           ::xml_schema::byte_pskel& /* selected */,
           ::prefix_pskel& /* prefix */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::byte_pskel&);

  void
  desc_parser (::xml_schema::string_pskel&);

  void
  xpos_min_parser (::xml_schema::byte_pskel&);

  void
  xpos_max_parser (::xml_schema::byte_pskel&);

  void
  xcount_parser (::xml_schema::byte_pskel&);

  void
  mode_parser (::xml_schema::string_pskel&);

  void
  selected_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  prefix_parser (::prefix_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  unitPrefix_pskel ();

  // Implementation details.
  //
  protected:
  unitPrefix_pskel* unitPrefix_impl_;
  unitPrefix_pskel (unitPrefix_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* id_parser_;
  ::xml_schema::string_pskel* desc_parser_;
  ::xml_schema::byte_pskel* xpos_min_parser_;
  ::xml_schema::byte_pskel* xpos_max_parser_;
  ::xml_schema::byte_pskel* xcount_parser_;
  ::xml_schema::string_pskel* mode_parser_;
  ::xml_schema::byte_pskel* selected_parser_;
  ::prefix_pskel* prefix_parser_;

  public:
  struct v_state_descr_
  {
    void (::unitPrefix_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // SRC_LOCALE_EN_JM_UIX_CONFIG_PSKEL_HXX
