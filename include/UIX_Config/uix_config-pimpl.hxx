// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef SRC_LOCALE_EN_JM_UIX_CONFIG_PIMPL_HXX
#define SRC_LOCALE_EN_JM_UIX_CONFIG_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define SRC_LOCALE_EN_JM_UIX_CONFIG_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "uix_config-pskel.hxx"

#include <xsde/cxx/stack.hxx>

class UIXConfig_pimpl: public UIXConfig_pskel
{
  public:
  UIXConfig_pimpl (bool = false);

  ~UIXConfig_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  locale (const ::std::string&);

  // Elements.
  //
  virtual void
  ApplicationStates (::ApplicationStates*);

  virtual ::UIXConfig*
  post_UIXConfig ();

  public:
  void
  pre_impl (::UIXConfig*);

  public:
  struct UIXConfig_pimpl_state
  {
    ::UIXConfig* UIXConfig_;
  };

  UIXConfig_pimpl_state UIXConfig_pimpl_state_;
  bool UIXConfig_pimpl_base_;
};

class ApplicationStates_pimpl: public ApplicationStates_pskel
{
  public:
  ApplicationStates_pimpl (bool = false);

  ~ApplicationStates_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  AppState (::AppState*);

  virtual ::ApplicationStates*
  post_ApplicationStates ();

  public:
  void
  pre_impl (::ApplicationStates*);

  public:
  struct ApplicationStates_pimpl_state
  {
    ::ApplicationStates* ApplicationStates_;
  };

  ApplicationStates_pimpl_state ApplicationStates_pimpl_state_;
  bool ApplicationStates_pimpl_base_;
};

class AppState_pimpl: public AppState_pskel
{
  public:
  AppState_pimpl (bool = false);

  ~AppState_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  name (const ::std::string&);

  virtual void
  desc (const ::std::string&);

  // Elements.
  //
  virtual void
  AppModes (::AppModes*);

  virtual void
  ScreenObjects (::ScreenObjects*);

  virtual ::AppState*
  post_AppState ();

  public:
  void
  pre_impl (::AppState*);

  public:
  struct AppState_pimpl_state
  {
    ::AppState* AppState_;
  };

  AppState_pimpl_state AppState_pimpl_state_;
  bool AppState_pimpl_base_;
};

class mode_pimpl: public mode_pskel
{
  public:
  mode_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual ::mode
  post_mode ();

  public:
  ::xml_schema::byte_pimpl base_impl_;

  public:
  struct mode_pimpl_state
  {
    ::mode mode_;
  };

  mode_pimpl_state mode_pimpl_state_;
};

class AppModes_pimpl: public AppModes_pskel
{
  public:
  AppModes_pimpl (bool = false);

  ~AppModes_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  mode (const ::mode&);

  virtual ::AppModes*
  post_AppModes ();

  public:
  void
  pre_impl (::AppModes*);

  public:
  struct AppModes_pimpl_state
  {
    ::AppModes* AppModes_;
  };

  AppModes_pimpl_state AppModes_pimpl_state_;
  bool AppModes_pimpl_base_;
};

class ScreenObjects_pimpl: public ScreenObjects_pskel
{
  public:
  ScreenObjects_pimpl (bool = false);

  ~ScreenObjects_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  LCDCharacterLine (::LCDCharacterLine*);

  virtual ::ScreenObjects*
  post_ScreenObjects ();

  public:
  void
  pre_impl (::ScreenObjects*);

  public:
  struct ScreenObjects_pimpl_state
  {
    ::ScreenObjects* ScreenObjects_;
  };

  ScreenObjects_pimpl_state ScreenObjects_pimpl_state_;
  bool ScreenObjects_pimpl_base_;
};

class textObj_pimpl: public textObj_pskel
{
  public:
  textObj_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual void
  align (const ::std::string&);

  virtual ::textObj
  post_textObj ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct textObj_pimpl_state
  {
    ::textObj textObj_;
  };

  textObj_pimpl_state textObj_pimpl_state_;
};

class durationValue_pimpl: public durationValue_pskel
{
  public:
  durationValue_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::durationValue
  post_durationValue ();

  public:
  ::xml_schema::byte_pimpl base_impl_;

  public:
  struct durationValue_pimpl_state
  {
    ::durationValue durationValue_;
  };

  durationValue_pimpl_state durationValue_pimpl_state_;
};

class dispUnit1_pimpl: public dispUnit1_pskel
{
  public:
  dispUnit1_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit1
  post_dispUnit1 ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct dispUnit1_pimpl_state
  {
    ::dispUnit1 dispUnit1_;
  };

  dispUnit1_pimpl_state dispUnit1_pimpl_state_;
};

class DispDuration_pimpl: public DispDuration_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  durationValue (const ::durationValue&);

  virtual void
  dispUnit (const ::dispUnit1&);

  virtual ::DispDuration
  post_DispDuration ();

  public:
  struct DispDuration_pimpl_state
  {
    ::DispDuration DispDuration_;
  };

  DispDuration_pimpl_state DispDuration_pimpl_state_;
};

class DispIdentifier_pimpl: public DispIdentifier_pskel
{
  public:
  DispIdentifier_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::DispIdentifier
  post_DispIdentifier ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct DispIdentifier_pimpl_state
  {
    ::DispIdentifier DispIdentifier_;
  };

  DispIdentifier_pimpl_state DispIdentifier_pimpl_state_;
};

class dispUnit2_pimpl: public dispUnit2_pskel
{
  public:
  dispUnit2_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit2
  post_dispUnit2 ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct dispUnit2_pimpl_state
  {
    ::dispUnit2 dispUnit2_;
  };

  dispUnit2_pimpl_state dispUnit2_pimpl_state_;
};

class dutyCycle_pimpl: public dutyCycle_pskel
{
  public:
  dutyCycle_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dutyCycle
  post_dutyCycle ();

  public:
  ::xml_schema::float_pimpl base_impl_;

  public:
  struct dutyCycle_pimpl_state
  {
    ::dutyCycle dutyCycle_;
  };

  dutyCycle_pimpl_state dutyCycle_pimpl_state_;
};

class DispDutyCycle_pimpl: public DispDutyCycle_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  dutyCycle (const ::dutyCycle&);

  virtual void
  dispUnit (const ::dispUnit2&);

  virtual ::DispDutyCycle
  post_DispDutyCycle ();

  public:
  struct DispDutyCycle_pimpl_state
  {
    ::DispDutyCycle DispDutyCycle_;
  };

  DispDutyCycle_pimpl_state DispDutyCycle_pimpl_state_;
};

class dispUnit3_pimpl: public dispUnit3_pskel
{
  public:
  dispUnit3_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit3
  post_dispUnit3 ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct dispUnit3_pimpl_state
  {
    ::dispUnit3 dispUnit3_;
  };

  dispUnit3_pimpl_state dispUnit3_pimpl_state_;
};

class voltageValue_pimpl: public voltageValue_pskel
{
  public:
  voltageValue_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::voltageValue
  post_voltageValue ();

  public:
  ::xml_schema::float_pimpl base_impl_;

  public:
  struct voltageValue_pimpl_state
  {
    ::voltageValue voltageValue_;
  };

  voltageValue_pimpl_state voltageValue_pimpl_state_;
};

class DispVoltage_pimpl: public DispVoltage_pskel
{
  public:
  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  voltageValue (const ::voltageValue&);

  virtual void
  dispUnit (const ::dispUnit3&);

  virtual ::DispVoltage
  post_DispVoltage ();

  public:
  struct DispVoltage_pimpl_state
  {
    ::DispVoltage DispVoltage_;
  };

  DispVoltage_pimpl_state DispVoltage_pimpl_state_;
};

class LCDCharacterLine_pimpl: public LCDCharacterLine_pskel
{
  public:
  LCDCharacterLine_pimpl (bool = false);

  ~LCDCharacterLine_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  num (signed char);

  virtual void
  max_char (signed char);

  // Elements.
  //
  virtual void
  choice_arm (choice_arm_tag);

  virtual void
  DispTitle (::DispTitle*);

  virtual void
  textObj (const ::textObj&);

  virtual void
  DispFrequency (::DispFrequency*);

  virtual void
  DispIdentifier (const ::DispIdentifier&);

  virtual void
  DispDuration (const ::DispDuration&);

  virtual void
  DispDutyCycle (const ::DispDutyCycle&);

  virtual void
  DispVoltage (const ::DispVoltage&);

  virtual ::LCDCharacterLine*
  post_LCDCharacterLine ();

  public:
  void
  pre_impl (::LCDCharacterLine*);

  public:
  struct LCDCharacterLine_pimpl_state
  {
    ::LCDCharacterLine* LCDCharacterLine_;
    ::LCDCharacterLine::choice_type* choice_;
  };

  LCDCharacterLine_pimpl_state LCDCharacterLine_pimpl_state_;
  bool LCDCharacterLine_pimpl_base_;
};

class textObj1_pimpl: public textObj1_pskel
{
  public:
  textObj1_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual void
  align (const ::std::string&);

  virtual ::textObj1
  post_textObj1 ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct textObj1_pimpl_state
  {
    ::textObj1 textObj1_;
  };

  textObj1_pimpl_state textObj1_pimpl_state_;
};

class DispTitle_pimpl: public DispTitle_pskel
{
  public:
  DispTitle_pimpl (bool = false);

  ~DispTitle_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  // Elements.
  //
  virtual void
  textObj (const ::textObj1&);

  virtual ::DispTitle*
  post_DispTitle ();

  public:
  void
  pre_impl (::DispTitle*);

  public:
  struct DispTitle_pimpl_state
  {
    ::DispTitle* DispTitle_;
  };

  DispTitle_pimpl_state DispTitle_pimpl_state_;
  bool DispTitle_pimpl_base_;
};

class freqValue_pimpl: public freqValue_pskel
{
  public:
  freqValue_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::freqValue
  post_freqValue ();

  public:
  ::xml_schema::float_pimpl base_impl_;

  public:
  struct freqValue_pimpl_state
  {
    ::freqValue freqValue_;
  };

  freqValue_pimpl_state freqValue_pimpl_state_;
};

class dispUnit_pimpl: public dispUnit_pskel
{
  public:
  dispUnit_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual ::dispUnit
  post_dispUnit ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct dispUnit_pimpl_state
  {
    ::dispUnit dispUnit_;
  };

  dispUnit_pimpl_state dispUnit_pimpl_state_;
};

class DispFrequency_pimpl: public DispFrequency_pskel
{
  public:
  DispFrequency_pimpl (bool = false);

  ~DispFrequency_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  // Elements.
  //
  virtual void
  freqValue (const ::freqValue&);

  virtual void
  unitPrefix (::unitPrefix*);

  virtual void
  dispUnit (const ::dispUnit&);

  virtual ::DispFrequency*
  post_DispFrequency ();

  public:
  void
  pre_impl (::DispFrequency*);

  public:
  struct DispFrequency_pimpl_state
  {
    ::DispFrequency* DispFrequency_;
  };

  DispFrequency_pimpl_state DispFrequency_pimpl_state_;
  bool DispFrequency_pimpl_base_;
};

class prefix_pimpl: public prefix_pskel
{
  public:
  prefix_pimpl ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  default_value (const ::std::string&);

  virtual ::prefix
  post_prefix ();

  public:
  ::xml_schema::string_pimpl base_impl_;

  public:
  struct prefix_pimpl_state
  {
    ::prefix prefix_;
  };

  prefix_pimpl_state prefix_pimpl_state_;
};

class unitPrefix_pimpl: public unitPrefix_pskel
{
  public:
  unitPrefix_pimpl (bool = false);

  ~unitPrefix_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Attributes.
  //
  virtual void
  id (signed char);

  virtual void
  desc (const ::std::string&);

  virtual void
  xpos_min (signed char);

  virtual void
  xpos_max (signed char);

  virtual void
  xcount (signed char);

  virtual void
  mode (const ::std::string&);

  virtual void
  selected (signed char);

  // Elements.
  //
  virtual void
  prefix (const ::prefix&);

  virtual ::unitPrefix*
  post_unitPrefix ();

  public:
  void
  pre_impl (::unitPrefix*);

  public:
  struct unitPrefix_pimpl_state
  {
    ::unitPrefix* unitPrefix_;
  };

  unitPrefix_pimpl_state unitPrefix_pimpl_state_;
  bool unitPrefix_pimpl_base_;
};

#ifdef SRC_LOCALE_EN_JM_UIX_CONFIG_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

// Parser aggregate for the UIXConfig element.
//
class UIXConfig_paggr
{
  public:
  UIXConfig_paggr ();

  void
  pre ()
  {
    this->UIXConfig_p_.pre ();
  }

  ::UIXConfig*
  post ()
  {
    return this->UIXConfig_p_.post_UIXConfig ();
  }

  ::UIXConfig_pimpl&
  root_parser ()
  {
    return this->UIXConfig_p_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->UIXConfig_p_._reset ();
  }

  public:
  ::DispTitle_pimpl DispTitle_p_;
  ::textObj1_pimpl textObj1_p_;
  ::textObj_pimpl textObj_p_;
  ::DispFrequency_pimpl DispFrequency_p_;
  ::freqValue_pimpl freqValue_p_;
  ::unitPrefix_pimpl unitPrefix_p_;
  ::UIXConfig_pimpl UIXConfig_p_;
  ::ApplicationStates_pimpl ApplicationStates_p_;
  ::prefix_pimpl prefix_p_;
  ::dispUnit_pimpl dispUnit_p_;
  ::xml_schema::string_pimpl string_p_;
  ::xml_schema::byte_pimpl byte_p_;
  ::mode_pimpl mode_p_;
  ::ScreenObjects_pimpl ScreenObjects_p_;
  ::LCDCharacterLine_pimpl LCDCharacterLine_p_;
  ::DispDuration_pimpl DispDuration_p_;
  ::DispIdentifier_pimpl DispIdentifier_p_;
  ::DispDutyCycle_pimpl DispDutyCycle_p_;
  ::dispUnit3_pimpl dispUnit3_p_;
  ::durationValue_pimpl durationValue_p_;
  ::dispUnit1_pimpl dispUnit1_p_;
  ::dispUnit2_pimpl dispUnit2_p_;
  ::voltageValue_pimpl voltageValue_p_;
  ::dutyCycle_pimpl dutyCycle_p_;
  ::DispVoltage_pimpl DispVoltage_p_;
  ::AppState_pimpl AppState_p_;
  ::AppModes_pimpl AppModes_p_;
};

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // SRC_LOCALE_EN_JM_UIX_CONFIG_PIMPL_HXX
