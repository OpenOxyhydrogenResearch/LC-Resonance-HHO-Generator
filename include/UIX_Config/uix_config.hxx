// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef SRC_LOCALE_EN_JM_UIX_CONFIG_HXX
#define SRC_LOCALE_EN_JM_UIX_CONFIG_HXX

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include <string>
#include <xsde/cxx/hybrid/xml-schema.hxx>
#include <xsde/cxx/hybrid/sequence.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;
  typedef ::std::string any_simple_type;

  typedef signed char byte;
  using ::xsde::cxx::hybrid::byte_base;

  typedef unsigned char unsigned_byte;
  using ::xsde::cxx::hybrid::unsigned_byte_base;

  typedef short short_;
  using ::xsde::cxx::hybrid::short_base;

  typedef unsigned short unsigned_short;
  using ::xsde::cxx::hybrid::unsigned_short_base;

  typedef int int_;
  using ::xsde::cxx::hybrid::int_base;

  typedef unsigned int unsigned_int;
  using ::xsde::cxx::hybrid::unsigned_int_base;

  typedef long long long_;
  using ::xsde::cxx::hybrid::long_base;

  typedef unsigned long long unsigned_long;
  using ::xsde::cxx::hybrid::unsigned_long_base;

  typedef long integer;
  using ::xsde::cxx::hybrid::integer_base;

  typedef long non_positive_integer;
  using ::xsde::cxx::hybrid::non_positive_integer_base;

  typedef unsigned long non_negative_integer;
  using ::xsde::cxx::hybrid::non_negative_integer_base;

  typedef unsigned long positive_integer;
  using ::xsde::cxx::hybrid::positive_integer_base;

  typedef long negative_integer;
  using ::xsde::cxx::hybrid::negative_integer_base;

  typedef bool boolean;
  using ::xsde::cxx::hybrid::boolean_base;

  typedef float float_;
  using ::xsde::cxx::hybrid::float_base;

  typedef double double_;
  using ::xsde::cxx::hybrid::double_base;

  typedef double decimal;
  using ::xsde::cxx::hybrid::decimal_base;

  typedef ::std::string string;

  typedef ::std::string normalized_string;

  typedef ::std::string token;

  typedef ::std::string name;

  typedef ::std::string nmtoken;

  typedef ::xsde::cxx::string_sequence nmtokens;

  typedef ::std::string ncname;

  typedef ::std::string language;

  typedef ::std::string id;

  typedef ::std::string idref;

  typedef ::xsde::cxx::string_sequence idrefs;

  typedef ::std::string uri;

  using ::xsde::cxx::qname;

  using ::xsde::cxx::buffer;
  typedef ::xsde::cxx::buffer base64_binary;
  typedef ::xsde::cxx::buffer hex_binary;

  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::date;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::time;

  using ::xsde::cxx::hybrid::pod_sequence;
  using ::xsde::cxx::hybrid::fix_sequence;
  using ::xsde::cxx::hybrid::var_sequence;
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::hybrid::data_sequence;
}

class UIXConfig;
class ApplicationStates;
class AppState;
class mode;
class AppModes;
class ScreenObjects;
class textObj;
class durationValue;
class dispUnit1;
class DispDuration;
class DispIdentifier;
class dispUnit2;
class dutyCycle;
class DispDutyCycle;
class dispUnit3;
class voltageValue;
class DispVoltage;
class LCDCharacterLine;
class textObj1;
class DispTitle;
class freqValue;
class dispUnit;
class DispFrequency;
class prefix;
class unitPrefix;

// UIXConfig (variable-length)
//
class UIXConfig
{
  private:
  UIXConfig (const UIXConfig&);
  UIXConfig& operator= (const UIXConfig&);

  public:
  UIXConfig ();

  ~UIXConfig ();

  // locale
  //
  bool
  locale_present () const;

  void
  locale_present (bool);

  const ::std::string&
  locale () const;

  ::std::string&
  locale ();

  void
  locale (const ::std::string&);

  // ApplicationStates
  //
  const ::ApplicationStates&
  ApplicationStates () const;

  ::ApplicationStates&
  ApplicationStates ();

  void
  ApplicationStates (::ApplicationStates*);

  private:
  ::std::string locale_;
  unsigned char locale_present_;
  ::ApplicationStates* ApplicationStates_;
};

// ApplicationStates (variable-length)
//
class ApplicationStates
{
  private:
  ApplicationStates (const ApplicationStates&);
  ApplicationStates& operator= (const ApplicationStates&);

  public:
  ApplicationStates ();

  ~ApplicationStates ();

  // AppState
  //
  typedef ::xsde::cxx::hybrid::var_sequence< ::AppState > AppState_sequence;
  typedef AppState_sequence::iterator AppState_iterator;
  typedef AppState_sequence::const_iterator AppState_const_iterator;

  const AppState_sequence&
  AppState () const;

  AppState_sequence&
  AppState ();

  private:
  AppState_sequence AppState_;
};

// AppState (variable-length)
//
class AppState
{
  private:
  AppState (const AppState&);
  AppState& operator= (const AppState&);

  public:
  AppState ();

  ~AppState ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // name
  //
  bool
  name_present () const;

  void
  name_present (bool);

  const ::std::string&
  name () const;

  ::std::string&
  name ();

  void
  name (const ::std::string&);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // AppModes
  //
  const ::AppModes&
  AppModes () const;

  ::AppModes&
  AppModes ();

  void
  AppModes (::AppModes*);

  // ScreenObjects
  //
  const ::ScreenObjects&
  ScreenObjects () const;

  ::ScreenObjects&
  ScreenObjects ();

  void
  ScreenObjects (::ScreenObjects*);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string name_;
  unsigned char name_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  ::AppModes* AppModes_;
  ::ScreenObjects* ScreenObjects_;
};

// mode (fixed-length)
//
class mode: public ::xml_schema::byte_base
{
  public:
  mode ();

  mode (const mode&);
  mode& operator= (const mode&);

  ~mode ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
};

// AppModes (variable-length)
//
class AppModes
{
  private:
  AppModes (const AppModes&);
  AppModes& operator= (const AppModes&);

  public:
  AppModes ();

  ~AppModes ();

  // mode
  //
  typedef ::xsde::cxx::hybrid::fix_sequence< ::mode > mode_sequence;
  typedef mode_sequence::iterator mode_iterator;
  typedef mode_sequence::const_iterator mode_const_iterator;

  const mode_sequence&
  mode () const;

  mode_sequence&
  mode ();

  private:
  mode_sequence mode_;
};

// ScreenObjects (variable-length)
//
class ScreenObjects
{
  private:
  ScreenObjects (const ScreenObjects&);
  ScreenObjects& operator= (const ScreenObjects&);

  public:
  ScreenObjects ();

  ~ScreenObjects ();

  // LCDCharacterLine
  //
  typedef ::xsde::cxx::hybrid::var_sequence< ::LCDCharacterLine > LCDCharacterLine_sequence;
  typedef LCDCharacterLine_sequence::iterator LCDCharacterLine_iterator;
  typedef LCDCharacterLine_sequence::const_iterator LCDCharacterLine_const_iterator;

  const LCDCharacterLine_sequence&
  LCDCharacterLine () const;

  LCDCharacterLine_sequence&
  LCDCharacterLine ();

  private:
  LCDCharacterLine_sequence LCDCharacterLine_;
};

// textObj (fixed-length)
//
class textObj: public ::std::string
{
  public:
  textObj ();

  textObj (const textObj&);
  textObj& operator= (const textObj&);

  ~textObj ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  // align
  //
  bool
  align_present () const;

  void
  align_present (bool);

  const ::std::string&
  align () const;

  ::std::string&
  align ();

  void
  align (const ::std::string&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
  ::std::string align_;
  unsigned char align_present_;
};

// durationValue (fixed-length)
//
class durationValue: public ::xml_schema::byte_base
{
  public:
  durationValue ();

  durationValue (const durationValue&);
  durationValue& operator= (const durationValue&);

  ~durationValue ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// dispUnit1 (fixed-length)
//
class dispUnit1: public ::std::string
{
  public:
  dispUnit1 ();

  dispUnit1 (const dispUnit1&);
  dispUnit1& operator= (const dispUnit1&);

  ~dispUnit1 ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// DispDuration (fixed-length)
//
class DispDuration
{
  public:
  DispDuration ();

  DispDuration (const DispDuration&);
  DispDuration& operator= (const DispDuration&);

  ~DispDuration ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // durationValue
  //
  const ::durationValue&
  durationValue () const;

  ::durationValue&
  durationValue ();

  void
  durationValue (const ::durationValue&);

  // dispUnit
  //
  const ::dispUnit1&
  dispUnit () const;

  ::dispUnit1&
  dispUnit ();

  void
  dispUnit (const ::dispUnit1&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::durationValue durationValue_;
  ::dispUnit1 dispUnit_;
};

// DispIdentifier (fixed-length)
//
class DispIdentifier: public ::std::string
{
  public:
  DispIdentifier ();

  DispIdentifier (const DispIdentifier&);
  DispIdentifier& operator= (const DispIdentifier&);

  ~DispIdentifier ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// dispUnit2 (fixed-length)
//
class dispUnit2: public ::std::string
{
  public:
  dispUnit2 ();

  dispUnit2 (const dispUnit2&);
  dispUnit2& operator= (const dispUnit2&);

  ~dispUnit2 ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// dutyCycle (fixed-length)
//
class dutyCycle: public ::xml_schema::float_base
{
  public:
  dutyCycle ();

  dutyCycle (const dutyCycle&);
  dutyCycle& operator= (const dutyCycle&);

  ~dutyCycle ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// DispDutyCycle (fixed-length)
//
class DispDutyCycle
{
  public:
  DispDutyCycle ();

  DispDutyCycle (const DispDutyCycle&);
  DispDutyCycle& operator= (const DispDutyCycle&);

  ~DispDutyCycle ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // dutyCycle
  //
  const ::dutyCycle&
  dutyCycle () const;

  ::dutyCycle&
  dutyCycle ();

  void
  dutyCycle (const ::dutyCycle&);

  // dispUnit
  //
  const ::dispUnit2&
  dispUnit () const;

  ::dispUnit2&
  dispUnit ();

  void
  dispUnit (const ::dispUnit2&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::dutyCycle dutyCycle_;
  ::dispUnit2 dispUnit_;
};

// dispUnit3 (fixed-length)
//
class dispUnit3: public ::std::string
{
  public:
  dispUnit3 ();

  dispUnit3 (const dispUnit3&);
  dispUnit3& operator= (const dispUnit3&);

  ~dispUnit3 ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// voltageValue (fixed-length)
//
class voltageValue: public ::xml_schema::float_base
{
  public:
  voltageValue ();

  voltageValue (const voltageValue&);
  voltageValue& operator= (const voltageValue&);

  ~voltageValue ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// DispVoltage (fixed-length)
//
class DispVoltage
{
  public:
  DispVoltage ();

  DispVoltage (const DispVoltage&);
  DispVoltage& operator= (const DispVoltage&);

  ~DispVoltage ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // voltageValue
  //
  const ::voltageValue&
  voltageValue () const;

  ::voltageValue&
  voltageValue ();

  void
  voltageValue (const ::voltageValue&);

  // dispUnit
  //
  const ::dispUnit3&
  dispUnit () const;

  ::dispUnit3&
  dispUnit ();

  void
  dispUnit (const ::dispUnit3&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::voltageValue voltageValue_;
  ::dispUnit3 dispUnit_;
};

// LCDCharacterLine (variable-length)
//
class LCDCharacterLine
{
  private:
  LCDCharacterLine (const LCDCharacterLine&);
  LCDCharacterLine& operator= (const LCDCharacterLine&);

  public:
  LCDCharacterLine ();

  ~LCDCharacterLine ();

  // num
  //
  bool
  num_present () const;

  void
  num_present (bool);

  signed char
  num () const;

  signed char&
  num ();

  void
  num (signed char);

  // max_char
  //
  bool
  max_char_present () const;

  void
  max_char_present (bool);

  signed char
  max_char () const;

  signed char&
  max_char ();

  void
  max_char (signed char);

  // choice (variable-length)
  //
  class choice_type
  {
    public:
    choice_type ();

    ~choice_type ();

    private:
    choice_type (const choice_type&);
    choice_type& operator= (const choice_type&);

    public:
    enum choice_arm_tag
    {
      DispTitle_tag,
      textObj_tag,
      DispFrequency_tag,
      DispIdentifier_tag,
      DispDuration_tag,
      DispDutyCycle_tag,
      DispVoltage_tag
    };

    choice_arm_tag
    choice_arm () const;

    void
    choice_arm (choice_arm_tag);

    // DispTitle
    //
    const ::DispTitle&
    DispTitle () const;

    ::DispTitle&
    DispTitle ();

    void
    DispTitle (::DispTitle*);

    // textObj
    //
    const ::textObj&
    textObj () const;

    ::textObj&
    textObj ();

    void
    textObj (const ::textObj&);

    // DispFrequency
    //
    const ::DispFrequency&
    DispFrequency () const;

    ::DispFrequency&
    DispFrequency ();

    void
    DispFrequency (::DispFrequency*);

    // DispIdentifier
    //
    const ::DispIdentifier&
    DispIdentifier () const;

    ::DispIdentifier&
    DispIdentifier ();

    void
    DispIdentifier (const ::DispIdentifier&);

    // DispDuration
    //
    const ::DispDuration&
    DispDuration () const;

    ::DispDuration&
    DispDuration ();

    void
    DispDuration (const ::DispDuration&);

    // DispDutyCycle
    //
    const ::DispDutyCycle&
    DispDutyCycle () const;

    ::DispDutyCycle&
    DispDutyCycle ();

    void
    DispDutyCycle (const ::DispDutyCycle&);

    // DispVoltage
    //
    const ::DispVoltage&
    DispVoltage () const;

    ::DispVoltage&
    DispVoltage ();

    void
    DispVoltage (const ::DispVoltage&);

    private:
    union
    {
      ::DispTitle* DispTitle_;
      union
      {
        size_t align_;
        char data_[sizeof (::textObj)];
      } textObj_;
      ::DispFrequency* DispFrequency_;
      union
      {
        size_t align_;
        char data_[sizeof (::DispIdentifier)];
      } DispIdentifier_;
      union
      {
        size_t align_;
        char data_[sizeof (::DispDuration)];
      } DispDuration_;
      union
      {
        size_t align_;
        char data_[sizeof (::DispDutyCycle)];
      } DispDutyCycle_;
      union
      {
        size_t align_;
        char data_[sizeof (::DispVoltage)];
      } DispVoltage_;
    } choice_;
    choice_arm_tag choice_arm_;
  };

  typedef ::xsde::cxx::hybrid::var_sequence< choice_type > choice_sequence;
  typedef choice_sequence::iterator choice_iterator;
  typedef choice_sequence::const_iterator choice_const_iterator;

  const choice_sequence&
  choice () const;

  choice_sequence&
  choice ();

  private:
  signed char num_;
  unsigned char num_present_;
  signed char max_char_;
  unsigned char max_char_present_;
  choice_sequence choice_;
};

// textObj1 (fixed-length)
//
class textObj1: public ::std::string
{
  public:
  textObj1 ();

  textObj1 (const textObj1&);
  textObj1& operator= (const textObj1&);

  ~textObj1 ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  // align
  //
  bool
  align_present () const;

  void
  align_present (bool);

  const ::std::string&
  align () const;

  ::std::string&
  align ();

  void
  align (const ::std::string&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
  ::std::string align_;
  unsigned char align_present_;
};

// DispTitle (variable-length)
//
class DispTitle
{
  private:
  DispTitle (const DispTitle&);
  DispTitle& operator= (const DispTitle&);

  public:
  DispTitle ();

  ~DispTitle ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // textObj
  //
  typedef ::xsde::cxx::hybrid::fix_sequence< ::textObj1 > textObj_sequence;
  typedef textObj_sequence::iterator textObj_iterator;
  typedef textObj_sequence::const_iterator textObj_const_iterator;

  const textObj_sequence&
  textObj () const;

  textObj_sequence&
  textObj ();

  private:
  signed char id_;
  unsigned char id_present_;
  textObj_sequence textObj_;
};

// freqValue (fixed-length)
//
class freqValue: public ::xml_schema::float_base
{
  public:
  freqValue ();

  freqValue (const freqValue&);
  freqValue& operator= (const freqValue&);

  ~freqValue ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// dispUnit (fixed-length)
//
class dispUnit: public ::std::string
{
  public:
  dispUnit ();

  dispUnit (const dispUnit&);
  dispUnit& operator= (const dispUnit&);

  ~dispUnit ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
};

// DispFrequency (variable-length)
//
class DispFrequency
{
  private:
  DispFrequency (const DispFrequency&);
  DispFrequency& operator= (const DispFrequency&);

  public:
  DispFrequency ();

  ~DispFrequency ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  // freqValue
  //
  bool
  freqValue_present () const;

  void
  freqValue_present (bool);

  const ::freqValue&
  freqValue () const;

  ::freqValue&
  freqValue ();

  void
  freqValue (const ::freqValue&);

  // unitPrefix
  //
  bool
  unitPrefix_present () const;

  const ::unitPrefix&
  unitPrefix () const;

  ::unitPrefix&
  unitPrefix ();

  void
  unitPrefix (::unitPrefix*);

  // dispUnit
  //
  bool
  dispUnit_present () const;

  void
  dispUnit_present (bool);

  const ::dispUnit&
  dispUnit () const;

  ::dispUnit&
  dispUnit ();

  void
  dispUnit (const ::dispUnit&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
  ::freqValue freqValue_;
  unsigned char freqValue_present_;
  ::unitPrefix* unitPrefix_;
  ::dispUnit dispUnit_;
  unsigned char dispUnit_present_;
};

// prefix (fixed-length)
//
class prefix: public ::std::string
{
  public:
  prefix ();

  prefix (const prefix&);
  prefix& operator= (const prefix&);

  ~prefix ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // default_value
  //
  bool
  default_value_present () const;

  void
  default_value_present (bool);

  const ::std::string&
  default_value () const;

  ::std::string&
  default_value ();

  void
  default_value (const ::std::string&);

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  ::std::string default_value_;
  unsigned char default_value_present_;
};

// unitPrefix (variable-length)
//
class unitPrefix
{
  private:
  unitPrefix (const unitPrefix&);
  unitPrefix& operator= (const unitPrefix&);

  public:
  unitPrefix ();

  ~unitPrefix ();

  // id
  //
  bool
  id_present () const;

  void
  id_present (bool);

  signed char
  id () const;

  signed char&
  id ();

  void
  id (signed char);

  // desc
  //
  bool
  desc_present () const;

  void
  desc_present (bool);

  const ::std::string&
  desc () const;

  ::std::string&
  desc ();

  void
  desc (const ::std::string&);

  // xpos_min
  //
  bool
  xpos_min_present () const;

  void
  xpos_min_present (bool);

  signed char
  xpos_min () const;

  signed char&
  xpos_min ();

  void
  xpos_min (signed char);

  // xpos_max
  //
  bool
  xpos_max_present () const;

  void
  xpos_max_present (bool);

  signed char
  xpos_max () const;

  signed char&
  xpos_max ();

  void
  xpos_max (signed char);

  // xcount
  //
  bool
  xcount_present () const;

  void
  xcount_present (bool);

  signed char
  xcount () const;

  signed char&
  xcount ();

  void
  xcount (signed char);

  // mode
  //
  bool
  mode_present () const;

  void
  mode_present (bool);

  const ::std::string&
  mode () const;

  ::std::string&
  mode ();

  void
  mode (const ::std::string&);

  // selected
  //
  bool
  selected_present () const;

  void
  selected_present (bool);

  signed char
  selected () const;

  signed char&
  selected ();

  void
  selected (signed char);

  // prefix
  //
  typedef ::xsde::cxx::hybrid::fix_sequence< ::prefix > prefix_sequence;
  typedef prefix_sequence::iterator prefix_iterator;
  typedef prefix_sequence::const_iterator prefix_const_iterator;

  const prefix_sequence&
  prefix () const;

  prefix_sequence&
  prefix ();

  private:
  signed char id_;
  unsigned char id_present_;
  ::std::string desc_;
  unsigned char desc_present_;
  signed char xpos_min_;
  unsigned char xpos_min_present_;
  signed char xpos_max_;
  unsigned char xpos_max_present_;
  signed char xcount_;
  unsigned char xcount_present_;
  ::std::string mode_;
  unsigned char mode_present_;
  signed char selected_;
  unsigned char selected_present_;
  prefix_sequence prefix_;
};

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // SRC_LOCALE_EN_JM_UIX_CONFIG_HXX
