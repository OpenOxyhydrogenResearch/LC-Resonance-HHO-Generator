// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "uix_config-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

// UIXConfig_pimpl
//

UIXConfig_pimpl::
UIXConfig_pimpl (bool b)
{
  this->UIXConfig_pimpl_base_ = b;
  this->UIXConfig_pimpl_state_.UIXConfig_ = 0;
}

UIXConfig_pimpl::
~UIXConfig_pimpl ()
{
  if (!this->UIXConfig_pimpl_base_ && this->UIXConfig_pimpl_state_.UIXConfig_)
    delete this->UIXConfig_pimpl_state_.UIXConfig_;
}

void UIXConfig_pimpl::
_reset ()
{
  UIXConfig_pskel::_reset ();

  if (!this->UIXConfig_pimpl_base_ && this->UIXConfig_pimpl_state_.UIXConfig_)
  {
    delete this->UIXConfig_pimpl_state_.UIXConfig_;
    this->UIXConfig_pimpl_state_.UIXConfig_ = 0;
  }
}

void UIXConfig_pimpl::
pre_impl (::UIXConfig* x)
{
  this->UIXConfig_pimpl_state_.UIXConfig_ = x;
}

void UIXConfig_pimpl::
pre ()
{
  ::UIXConfig* x = new ::UIXConfig;
  this->pre_impl (x);
}

void UIXConfig_pimpl::
locale (const ::std::string& x)
{
  this->UIXConfig_pimpl_state_.UIXConfig_->locale (x);
}

void UIXConfig_pimpl::
ApplicationStates (::ApplicationStates* x)
{
  this->UIXConfig_pimpl_state_.UIXConfig_->ApplicationStates (x);
}

::UIXConfig* UIXConfig_pimpl::
post_UIXConfig ()
{
  ::UIXConfig* r = this->UIXConfig_pimpl_state_.UIXConfig_;
  this->UIXConfig_pimpl_state_.UIXConfig_ = 0;
  return r;
}

// ApplicationStates_pimpl
//

ApplicationStates_pimpl::
ApplicationStates_pimpl (bool b)
{
  this->ApplicationStates_pimpl_base_ = b;
  this->ApplicationStates_pimpl_state_.ApplicationStates_ = 0;
}

ApplicationStates_pimpl::
~ApplicationStates_pimpl ()
{
  if (!this->ApplicationStates_pimpl_base_ && this->ApplicationStates_pimpl_state_.ApplicationStates_)
    delete this->ApplicationStates_pimpl_state_.ApplicationStates_;
}

void ApplicationStates_pimpl::
_reset ()
{
  ApplicationStates_pskel::_reset ();

  if (!this->ApplicationStates_pimpl_base_ && this->ApplicationStates_pimpl_state_.ApplicationStates_)
  {
    delete this->ApplicationStates_pimpl_state_.ApplicationStates_;
    this->ApplicationStates_pimpl_state_.ApplicationStates_ = 0;
  }
}

void ApplicationStates_pimpl::
pre_impl (::ApplicationStates* x)
{
  this->ApplicationStates_pimpl_state_.ApplicationStates_ = x;
}

void ApplicationStates_pimpl::
pre ()
{
  ::ApplicationStates* x = new ::ApplicationStates;
  this->pre_impl (x);
}

void ApplicationStates_pimpl::
AppState (::AppState* x)
{
  this->ApplicationStates_pimpl_state_.ApplicationStates_->AppState ().push_back (x);
}

::ApplicationStates* ApplicationStates_pimpl::
post_ApplicationStates ()
{
  ::ApplicationStates* r = this->ApplicationStates_pimpl_state_.ApplicationStates_;
  this->ApplicationStates_pimpl_state_.ApplicationStates_ = 0;
  return r;
}

// AppState_pimpl
//

AppState_pimpl::
AppState_pimpl (bool b)
{
  this->AppState_pimpl_base_ = b;
  this->AppState_pimpl_state_.AppState_ = 0;
}

AppState_pimpl::
~AppState_pimpl ()
{
  if (!this->AppState_pimpl_base_ && this->AppState_pimpl_state_.AppState_)
    delete this->AppState_pimpl_state_.AppState_;
}

void AppState_pimpl::
_reset ()
{
  AppState_pskel::_reset ();

  if (!this->AppState_pimpl_base_ && this->AppState_pimpl_state_.AppState_)
  {
    delete this->AppState_pimpl_state_.AppState_;
    this->AppState_pimpl_state_.AppState_ = 0;
  }
}

void AppState_pimpl::
pre_impl (::AppState* x)
{
  this->AppState_pimpl_state_.AppState_ = x;
}

void AppState_pimpl::
pre ()
{
  ::AppState* x = new ::AppState;
  this->pre_impl (x);
}

void AppState_pimpl::
id (signed char x)
{
  this->AppState_pimpl_state_.AppState_->id (x);
}

void AppState_pimpl::
name (const ::std::string& x)
{
  this->AppState_pimpl_state_.AppState_->name (x);
}

void AppState_pimpl::
desc (const ::std::string& x)
{
  this->AppState_pimpl_state_.AppState_->desc (x);
}

void AppState_pimpl::
AppModes (::AppModes* x)
{
  this->AppState_pimpl_state_.AppState_->AppModes (x);
}

void AppState_pimpl::
ScreenObjects (::ScreenObjects* x)
{
  this->AppState_pimpl_state_.AppState_->ScreenObjects (x);
}

::AppState* AppState_pimpl::
post_AppState ()
{
  ::AppState* r = this->AppState_pimpl_state_.AppState_;
  this->AppState_pimpl_state_.AppState_ = 0;
  return r;
}

// mode_pimpl
//

mode_pimpl::
mode_pimpl ()
: mode_pskel (&base_impl_)
{
}

void mode_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->mode_pimpl_state_.mode_ = ::mode ();
}

void mode_pimpl::
id (signed char x)
{
  this->mode_pimpl_state_.mode_.id (x);
}

void mode_pimpl::
desc (const ::std::string& x)
{
  this->mode_pimpl_state_.mode_.desc (x);
}

::mode mode_pimpl::
post_mode ()
{
  static_cast< ::xml_schema::byte_base& > (this->mode_pimpl_state_.mode_) = 
  this->base_impl_.post_byte ();
  return this->mode_pimpl_state_.mode_;
}

// AppModes_pimpl
//

AppModes_pimpl::
AppModes_pimpl (bool b)
{
  this->AppModes_pimpl_base_ = b;
  this->AppModes_pimpl_state_.AppModes_ = 0;
}

AppModes_pimpl::
~AppModes_pimpl ()
{
  if (!this->AppModes_pimpl_base_ && this->AppModes_pimpl_state_.AppModes_)
    delete this->AppModes_pimpl_state_.AppModes_;
}

void AppModes_pimpl::
_reset ()
{
  AppModes_pskel::_reset ();

  if (!this->AppModes_pimpl_base_ && this->AppModes_pimpl_state_.AppModes_)
  {
    delete this->AppModes_pimpl_state_.AppModes_;
    this->AppModes_pimpl_state_.AppModes_ = 0;
  }
}

void AppModes_pimpl::
pre_impl (::AppModes* x)
{
  this->AppModes_pimpl_state_.AppModes_ = x;
}

void AppModes_pimpl::
pre ()
{
  ::AppModes* x = new ::AppModes;
  this->pre_impl (x);
}

void AppModes_pimpl::
mode (const ::mode& x)
{
  this->AppModes_pimpl_state_.AppModes_->mode ().push_back (x);
}

::AppModes* AppModes_pimpl::
post_AppModes ()
{
  ::AppModes* r = this->AppModes_pimpl_state_.AppModes_;
  this->AppModes_pimpl_state_.AppModes_ = 0;
  return r;
}

// ScreenObjects_pimpl
//

ScreenObjects_pimpl::
ScreenObjects_pimpl (bool b)
{
  this->ScreenObjects_pimpl_base_ = b;
  this->ScreenObjects_pimpl_state_.ScreenObjects_ = 0;
}

ScreenObjects_pimpl::
~ScreenObjects_pimpl ()
{
  if (!this->ScreenObjects_pimpl_base_ && this->ScreenObjects_pimpl_state_.ScreenObjects_)
    delete this->ScreenObjects_pimpl_state_.ScreenObjects_;
}

void ScreenObjects_pimpl::
_reset ()
{
  ScreenObjects_pskel::_reset ();

  if (!this->ScreenObjects_pimpl_base_ && this->ScreenObjects_pimpl_state_.ScreenObjects_)
  {
    delete this->ScreenObjects_pimpl_state_.ScreenObjects_;
    this->ScreenObjects_pimpl_state_.ScreenObjects_ = 0;
  }
}

void ScreenObjects_pimpl::
pre_impl (::ScreenObjects* x)
{
  this->ScreenObjects_pimpl_state_.ScreenObjects_ = x;
}

void ScreenObjects_pimpl::
pre ()
{
  ::ScreenObjects* x = new ::ScreenObjects;
  this->pre_impl (x);
}

void ScreenObjects_pimpl::
LCDCharacterLine (::LCDCharacterLine* x)
{
  this->ScreenObjects_pimpl_state_.ScreenObjects_->LCDCharacterLine ().push_back (x);
}

::ScreenObjects* ScreenObjects_pimpl::
post_ScreenObjects ()
{
  ::ScreenObjects* r = this->ScreenObjects_pimpl_state_.ScreenObjects_;
  this->ScreenObjects_pimpl_state_.ScreenObjects_ = 0;
  return r;
}

// textObj_pimpl
//

textObj_pimpl::
textObj_pimpl ()
: textObj_pskel (&base_impl_)
{
}

void textObj_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->textObj_pimpl_state_.textObj_ = ::textObj ();
}

void textObj_pimpl::
id (signed char x)
{
  this->textObj_pimpl_state_.textObj_.id (x);
}

void textObj_pimpl::
desc (const ::std::string& x)
{
  this->textObj_pimpl_state_.textObj_.desc (x);
}

void textObj_pimpl::
xpos_min (signed char x)
{
  this->textObj_pimpl_state_.textObj_.xpos_min (x);
}

void textObj_pimpl::
xpos_max (signed char x)
{
  this->textObj_pimpl_state_.textObj_.xpos_max (x);
}

void textObj_pimpl::
xcount (signed char x)
{
  this->textObj_pimpl_state_.textObj_.xcount (x);
}

void textObj_pimpl::
align (const ::std::string& x)
{
  this->textObj_pimpl_state_.textObj_.align (x);
}

::textObj textObj_pimpl::
post_textObj ()
{
  static_cast< ::std::string& > (this->textObj_pimpl_state_.textObj_) = 
  this->base_impl_.post_string ();
  return this->textObj_pimpl_state_.textObj_;
}

// durationValue_pimpl
//

durationValue_pimpl::
durationValue_pimpl ()
: durationValue_pskel (&base_impl_)
{
}

void durationValue_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->durationValue_pimpl_state_.durationValue_ = ::durationValue ();
}

void durationValue_pimpl::
id (signed char x)
{
  this->durationValue_pimpl_state_.durationValue_.id (x);
}

void durationValue_pimpl::
desc (const ::std::string& x)
{
  this->durationValue_pimpl_state_.durationValue_.desc (x);
}

void durationValue_pimpl::
xpos_min (signed char x)
{
  this->durationValue_pimpl_state_.durationValue_.xpos_min (x);
}

void durationValue_pimpl::
xpos_max (signed char x)
{
  this->durationValue_pimpl_state_.durationValue_.xpos_max (x);
}

void durationValue_pimpl::
xcount (signed char x)
{
  this->durationValue_pimpl_state_.durationValue_.xcount (x);
}

::durationValue durationValue_pimpl::
post_durationValue ()
{
  static_cast< ::xml_schema::byte_base& > (this->durationValue_pimpl_state_.durationValue_) = 
  this->base_impl_.post_byte ();
  return this->durationValue_pimpl_state_.durationValue_;
}

// dispUnit1_pimpl
//

dispUnit1_pimpl::
dispUnit1_pimpl ()
: dispUnit1_pskel (&base_impl_)
{
}

void dispUnit1_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->dispUnit1_pimpl_state_.dispUnit1_ = ::dispUnit1 ();
}

void dispUnit1_pimpl::
id (signed char x)
{
  this->dispUnit1_pimpl_state_.dispUnit1_.id (x);
}

void dispUnit1_pimpl::
desc (const ::std::string& x)
{
  this->dispUnit1_pimpl_state_.dispUnit1_.desc (x);
}

void dispUnit1_pimpl::
xpos_min (signed char x)
{
  this->dispUnit1_pimpl_state_.dispUnit1_.xpos_min (x);
}

void dispUnit1_pimpl::
xpos_max (signed char x)
{
  this->dispUnit1_pimpl_state_.dispUnit1_.xpos_max (x);
}

void dispUnit1_pimpl::
xcount (signed char x)
{
  this->dispUnit1_pimpl_state_.dispUnit1_.xcount (x);
}

::dispUnit1 dispUnit1_pimpl::
post_dispUnit1 ()
{
  static_cast< ::std::string& > (this->dispUnit1_pimpl_state_.dispUnit1_) = 
  this->base_impl_.post_string ();
  return this->dispUnit1_pimpl_state_.dispUnit1_;
}

// DispDuration_pimpl
//

void DispDuration_pimpl::
pre ()
{
  this->DispDuration_pimpl_state_.DispDuration_ = ::DispDuration ();
}

void DispDuration_pimpl::
id (signed char x)
{
  this->DispDuration_pimpl_state_.DispDuration_.id (x);
}

void DispDuration_pimpl::
durationValue (const ::durationValue& x)
{
  this->DispDuration_pimpl_state_.DispDuration_.durationValue (x);
}

void DispDuration_pimpl::
dispUnit (const ::dispUnit1& x)
{
  this->DispDuration_pimpl_state_.DispDuration_.dispUnit (x);
}

::DispDuration DispDuration_pimpl::
post_DispDuration ()
{
  return this->DispDuration_pimpl_state_.DispDuration_;
}

// DispIdentifier_pimpl
//

DispIdentifier_pimpl::
DispIdentifier_pimpl ()
: DispIdentifier_pskel (&base_impl_)
{
}

void DispIdentifier_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->DispIdentifier_pimpl_state_.DispIdentifier_ = ::DispIdentifier ();
}

void DispIdentifier_pimpl::
id (signed char x)
{
  this->DispIdentifier_pimpl_state_.DispIdentifier_.id (x);
}

void DispIdentifier_pimpl::
desc (const ::std::string& x)
{
  this->DispIdentifier_pimpl_state_.DispIdentifier_.desc (x);
}

void DispIdentifier_pimpl::
xpos_min (signed char x)
{
  this->DispIdentifier_pimpl_state_.DispIdentifier_.xpos_min (x);
}

void DispIdentifier_pimpl::
xpos_max (signed char x)
{
  this->DispIdentifier_pimpl_state_.DispIdentifier_.xpos_max (x);
}

void DispIdentifier_pimpl::
xcount (signed char x)
{
  this->DispIdentifier_pimpl_state_.DispIdentifier_.xcount (x);
}

::DispIdentifier DispIdentifier_pimpl::
post_DispIdentifier ()
{
  static_cast< ::std::string& > (this->DispIdentifier_pimpl_state_.DispIdentifier_) = 
  this->base_impl_.post_string ();
  return this->DispIdentifier_pimpl_state_.DispIdentifier_;
}

// dispUnit2_pimpl
//

dispUnit2_pimpl::
dispUnit2_pimpl ()
: dispUnit2_pskel (&base_impl_)
{
}

void dispUnit2_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->dispUnit2_pimpl_state_.dispUnit2_ = ::dispUnit2 ();
}

void dispUnit2_pimpl::
id (signed char x)
{
  this->dispUnit2_pimpl_state_.dispUnit2_.id (x);
}

void dispUnit2_pimpl::
desc (const ::std::string& x)
{
  this->dispUnit2_pimpl_state_.dispUnit2_.desc (x);
}

void dispUnit2_pimpl::
xpos_min (signed char x)
{
  this->dispUnit2_pimpl_state_.dispUnit2_.xpos_min (x);
}

void dispUnit2_pimpl::
xpos_max (signed char x)
{
  this->dispUnit2_pimpl_state_.dispUnit2_.xpos_max (x);
}

void dispUnit2_pimpl::
xcount (signed char x)
{
  this->dispUnit2_pimpl_state_.dispUnit2_.xcount (x);
}

::dispUnit2 dispUnit2_pimpl::
post_dispUnit2 ()
{
  static_cast< ::std::string& > (this->dispUnit2_pimpl_state_.dispUnit2_) = 
  this->base_impl_.post_string ();
  return this->dispUnit2_pimpl_state_.dispUnit2_;
}

// dutyCycle_pimpl
//

dutyCycle_pimpl::
dutyCycle_pimpl ()
: dutyCycle_pskel (&base_impl_)
{
}

void dutyCycle_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->dutyCycle_pimpl_state_.dutyCycle_ = ::dutyCycle ();
}

void dutyCycle_pimpl::
id (signed char x)
{
  this->dutyCycle_pimpl_state_.dutyCycle_.id (x);
}

void dutyCycle_pimpl::
desc (const ::std::string& x)
{
  this->dutyCycle_pimpl_state_.dutyCycle_.desc (x);
}

void dutyCycle_pimpl::
xpos_min (signed char x)
{
  this->dutyCycle_pimpl_state_.dutyCycle_.xpos_min (x);
}

void dutyCycle_pimpl::
xpos_max (signed char x)
{
  this->dutyCycle_pimpl_state_.dutyCycle_.xpos_max (x);
}

void dutyCycle_pimpl::
xcount (signed char x)
{
  this->dutyCycle_pimpl_state_.dutyCycle_.xcount (x);
}

::dutyCycle dutyCycle_pimpl::
post_dutyCycle ()
{
  static_cast< ::xml_schema::float_base& > (this->dutyCycle_pimpl_state_.dutyCycle_) = 
  this->base_impl_.post_float ();
  return this->dutyCycle_pimpl_state_.dutyCycle_;
}

// DispDutyCycle_pimpl
//

void DispDutyCycle_pimpl::
pre ()
{
  this->DispDutyCycle_pimpl_state_.DispDutyCycle_ = ::DispDutyCycle ();
}

void DispDutyCycle_pimpl::
id (signed char x)
{
  this->DispDutyCycle_pimpl_state_.DispDutyCycle_.id (x);
}

void DispDutyCycle_pimpl::
dutyCycle (const ::dutyCycle& x)
{
  this->DispDutyCycle_pimpl_state_.DispDutyCycle_.dutyCycle (x);
}

void DispDutyCycle_pimpl::
dispUnit (const ::dispUnit2& x)
{
  this->DispDutyCycle_pimpl_state_.DispDutyCycle_.dispUnit (x);
}

::DispDutyCycle DispDutyCycle_pimpl::
post_DispDutyCycle ()
{
  return this->DispDutyCycle_pimpl_state_.DispDutyCycle_;
}

// dispUnit3_pimpl
//

dispUnit3_pimpl::
dispUnit3_pimpl ()
: dispUnit3_pskel (&base_impl_)
{
}

void dispUnit3_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->dispUnit3_pimpl_state_.dispUnit3_ = ::dispUnit3 ();
}

void dispUnit3_pimpl::
id (signed char x)
{
  this->dispUnit3_pimpl_state_.dispUnit3_.id (x);
}

void dispUnit3_pimpl::
desc (const ::std::string& x)
{
  this->dispUnit3_pimpl_state_.dispUnit3_.desc (x);
}

void dispUnit3_pimpl::
xpos_min (signed char x)
{
  this->dispUnit3_pimpl_state_.dispUnit3_.xpos_min (x);
}

void dispUnit3_pimpl::
xpos_max (signed char x)
{
  this->dispUnit3_pimpl_state_.dispUnit3_.xpos_max (x);
}

void dispUnit3_pimpl::
xcount (signed char x)
{
  this->dispUnit3_pimpl_state_.dispUnit3_.xcount (x);
}

::dispUnit3 dispUnit3_pimpl::
post_dispUnit3 ()
{
  static_cast< ::std::string& > (this->dispUnit3_pimpl_state_.dispUnit3_) = 
  this->base_impl_.post_string ();
  return this->dispUnit3_pimpl_state_.dispUnit3_;
}

// voltageValue_pimpl
//

voltageValue_pimpl::
voltageValue_pimpl ()
: voltageValue_pskel (&base_impl_)
{
}

void voltageValue_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->voltageValue_pimpl_state_.voltageValue_ = ::voltageValue ();
}

void voltageValue_pimpl::
id (signed char x)
{
  this->voltageValue_pimpl_state_.voltageValue_.id (x);
}

void voltageValue_pimpl::
desc (const ::std::string& x)
{
  this->voltageValue_pimpl_state_.voltageValue_.desc (x);
}

void voltageValue_pimpl::
xpos_min (signed char x)
{
  this->voltageValue_pimpl_state_.voltageValue_.xpos_min (x);
}

void voltageValue_pimpl::
xpos_max (signed char x)
{
  this->voltageValue_pimpl_state_.voltageValue_.xpos_max (x);
}

void voltageValue_pimpl::
xcount (signed char x)
{
  this->voltageValue_pimpl_state_.voltageValue_.xcount (x);
}

::voltageValue voltageValue_pimpl::
post_voltageValue ()
{
  static_cast< ::xml_schema::float_base& > (this->voltageValue_pimpl_state_.voltageValue_) = 
  this->base_impl_.post_float ();
  return this->voltageValue_pimpl_state_.voltageValue_;
}

// DispVoltage_pimpl
//

void DispVoltage_pimpl::
pre ()
{
  this->DispVoltage_pimpl_state_.DispVoltage_ = ::DispVoltage ();
}

void DispVoltage_pimpl::
id (signed char x)
{
  this->DispVoltage_pimpl_state_.DispVoltage_.id (x);
}

void DispVoltage_pimpl::
voltageValue (const ::voltageValue& x)
{
  this->DispVoltage_pimpl_state_.DispVoltage_.voltageValue (x);
}

void DispVoltage_pimpl::
dispUnit (const ::dispUnit3& x)
{
  this->DispVoltage_pimpl_state_.DispVoltage_.dispUnit (x);
}

::DispVoltage DispVoltage_pimpl::
post_DispVoltage ()
{
  return this->DispVoltage_pimpl_state_.DispVoltage_;
}

// LCDCharacterLine_pimpl
//

LCDCharacterLine_pimpl::
LCDCharacterLine_pimpl (bool b)
{
  this->LCDCharacterLine_pimpl_base_ = b;
  this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_ = 0;
}

LCDCharacterLine_pimpl::
~LCDCharacterLine_pimpl ()
{
  if (!this->LCDCharacterLine_pimpl_base_ && this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_)
    delete this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_;
}

void LCDCharacterLine_pimpl::
_reset ()
{
  LCDCharacterLine_pskel::_reset ();

  if (!this->LCDCharacterLine_pimpl_base_ && this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_)
  {
    delete this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_;
    this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_ = 0;
  }
}

void LCDCharacterLine_pimpl::
pre_impl (::LCDCharacterLine* x)
{
  this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_ = x;
}

void LCDCharacterLine_pimpl::
pre ()
{
  ::LCDCharacterLine* x = new ::LCDCharacterLine;
  this->pre_impl (x);
}

void LCDCharacterLine_pimpl::
num (signed char x)
{
  this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_->num (x);
}

void LCDCharacterLine_pimpl::
max_char (signed char x)
{
  this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_->max_char (x);
}

void LCDCharacterLine_pimpl::
choice_arm (choice_arm_tag t)
{
  this->LCDCharacterLine_pimpl_state_.choice_ = new ::LCDCharacterLine::choice_type;
  this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_->choice ().push_back (this->LCDCharacterLine_pimpl_state_.choice_);
  this->LCDCharacterLine_pimpl_state_.choice_->choice_arm (
    static_cast< ::LCDCharacterLine::choice_type::choice_arm_tag > (t));
}

void LCDCharacterLine_pimpl::
DispTitle (::DispTitle* x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->DispTitle (x);
}

void LCDCharacterLine_pimpl::
textObj (const ::textObj& x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->textObj (x);
}

void LCDCharacterLine_pimpl::
DispFrequency (::DispFrequency* x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->DispFrequency (x);
}

void LCDCharacterLine_pimpl::
DispIdentifier (const ::DispIdentifier& x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->DispIdentifier (x);
}

void LCDCharacterLine_pimpl::
DispDuration (const ::DispDuration& x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->DispDuration (x);
}

void LCDCharacterLine_pimpl::
DispDutyCycle (const ::DispDutyCycle& x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->DispDutyCycle (x);
}

void LCDCharacterLine_pimpl::
DispVoltage (const ::DispVoltage& x)
{
  this->LCDCharacterLine_pimpl_state_.choice_->DispVoltage (x);
}

::LCDCharacterLine* LCDCharacterLine_pimpl::
post_LCDCharacterLine ()
{
  ::LCDCharacterLine* r = this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_;
  this->LCDCharacterLine_pimpl_state_.LCDCharacterLine_ = 0;
  return r;
}

// textObj1_pimpl
//

textObj1_pimpl::
textObj1_pimpl ()
: textObj1_pskel (&base_impl_)
{
}

void textObj1_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->textObj1_pimpl_state_.textObj1_ = ::textObj1 ();
}

void textObj1_pimpl::
id (signed char x)
{
  this->textObj1_pimpl_state_.textObj1_.id (x);
}

void textObj1_pimpl::
desc (const ::std::string& x)
{
  this->textObj1_pimpl_state_.textObj1_.desc (x);
}

void textObj1_pimpl::
xpos_min (signed char x)
{
  this->textObj1_pimpl_state_.textObj1_.xpos_min (x);
}

void textObj1_pimpl::
xpos_max (signed char x)
{
  this->textObj1_pimpl_state_.textObj1_.xpos_max (x);
}

void textObj1_pimpl::
xcount (signed char x)
{
  this->textObj1_pimpl_state_.textObj1_.xcount (x);
}

void textObj1_pimpl::
align (const ::std::string& x)
{
  this->textObj1_pimpl_state_.textObj1_.align (x);
}

::textObj1 textObj1_pimpl::
post_textObj1 ()
{
  static_cast< ::std::string& > (this->textObj1_pimpl_state_.textObj1_) = 
  this->base_impl_.post_string ();
  return this->textObj1_pimpl_state_.textObj1_;
}

// DispTitle_pimpl
//

DispTitle_pimpl::
DispTitle_pimpl (bool b)
{
  this->DispTitle_pimpl_base_ = b;
  this->DispTitle_pimpl_state_.DispTitle_ = 0;
}

DispTitle_pimpl::
~DispTitle_pimpl ()
{
  if (!this->DispTitle_pimpl_base_ && this->DispTitle_pimpl_state_.DispTitle_)
    delete this->DispTitle_pimpl_state_.DispTitle_;
}

void DispTitle_pimpl::
_reset ()
{
  DispTitle_pskel::_reset ();

  if (!this->DispTitle_pimpl_base_ && this->DispTitle_pimpl_state_.DispTitle_)
  {
    delete this->DispTitle_pimpl_state_.DispTitle_;
    this->DispTitle_pimpl_state_.DispTitle_ = 0;
  }
}

void DispTitle_pimpl::
pre_impl (::DispTitle* x)
{
  this->DispTitle_pimpl_state_.DispTitle_ = x;
}

void DispTitle_pimpl::
pre ()
{
  ::DispTitle* x = new ::DispTitle;
  this->pre_impl (x);
}

void DispTitle_pimpl::
id (signed char x)
{
  this->DispTitle_pimpl_state_.DispTitle_->id (x);
}

void DispTitle_pimpl::
textObj (const ::textObj1& x)
{
  this->DispTitle_pimpl_state_.DispTitle_->textObj ().push_back (x);
}

::DispTitle* DispTitle_pimpl::
post_DispTitle ()
{
  ::DispTitle* r = this->DispTitle_pimpl_state_.DispTitle_;
  this->DispTitle_pimpl_state_.DispTitle_ = 0;
  return r;
}

// freqValue_pimpl
//

freqValue_pimpl::
freqValue_pimpl ()
: freqValue_pskel (&base_impl_)
{
}

void freqValue_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->freqValue_pimpl_state_.freqValue_ = ::freqValue ();
}

void freqValue_pimpl::
id (signed char x)
{
  this->freqValue_pimpl_state_.freqValue_.id (x);
}

void freqValue_pimpl::
desc (const ::std::string& x)
{
  this->freqValue_pimpl_state_.freqValue_.desc (x);
}

void freqValue_pimpl::
xpos_min (signed char x)
{
  this->freqValue_pimpl_state_.freqValue_.xpos_min (x);
}

void freqValue_pimpl::
xpos_max (signed char x)
{
  this->freqValue_pimpl_state_.freqValue_.xpos_max (x);
}

void freqValue_pimpl::
xcount (signed char x)
{
  this->freqValue_pimpl_state_.freqValue_.xcount (x);
}

::freqValue freqValue_pimpl::
post_freqValue ()
{
  static_cast< ::xml_schema::float_base& > (this->freqValue_pimpl_state_.freqValue_) = 
  this->base_impl_.post_float ();
  return this->freqValue_pimpl_state_.freqValue_;
}

// dispUnit_pimpl
//

dispUnit_pimpl::
dispUnit_pimpl ()
: dispUnit_pskel (&base_impl_)
{
}

void dispUnit_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->dispUnit_pimpl_state_.dispUnit_ = ::dispUnit ();
}

void dispUnit_pimpl::
id (signed char x)
{
  this->dispUnit_pimpl_state_.dispUnit_.id (x);
}

void dispUnit_pimpl::
desc (const ::std::string& x)
{
  this->dispUnit_pimpl_state_.dispUnit_.desc (x);
}

void dispUnit_pimpl::
xpos_min (signed char x)
{
  this->dispUnit_pimpl_state_.dispUnit_.xpos_min (x);
}

void dispUnit_pimpl::
xpos_max (signed char x)
{
  this->dispUnit_pimpl_state_.dispUnit_.xpos_max (x);
}

void dispUnit_pimpl::
xcount (signed char x)
{
  this->dispUnit_pimpl_state_.dispUnit_.xcount (x);
}

::dispUnit dispUnit_pimpl::
post_dispUnit ()
{
  static_cast< ::std::string& > (this->dispUnit_pimpl_state_.dispUnit_) = 
  this->base_impl_.post_string ();
  return this->dispUnit_pimpl_state_.dispUnit_;
}

// DispFrequency_pimpl
//

DispFrequency_pimpl::
DispFrequency_pimpl (bool b)
{
  this->DispFrequency_pimpl_base_ = b;
  this->DispFrequency_pimpl_state_.DispFrequency_ = 0;
}

DispFrequency_pimpl::
~DispFrequency_pimpl ()
{
  if (!this->DispFrequency_pimpl_base_ && this->DispFrequency_pimpl_state_.DispFrequency_)
    delete this->DispFrequency_pimpl_state_.DispFrequency_;
}

void DispFrequency_pimpl::
_reset ()
{
  DispFrequency_pskel::_reset ();

  if (!this->DispFrequency_pimpl_base_ && this->DispFrequency_pimpl_state_.DispFrequency_)
  {
    delete this->DispFrequency_pimpl_state_.DispFrequency_;
    this->DispFrequency_pimpl_state_.DispFrequency_ = 0;
  }
}

void DispFrequency_pimpl::
pre_impl (::DispFrequency* x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_ = x;
}

void DispFrequency_pimpl::
pre ()
{
  ::DispFrequency* x = new ::DispFrequency;
  this->pre_impl (x);
}

void DispFrequency_pimpl::
id (signed char x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->id (x);
}

void DispFrequency_pimpl::
desc (const ::std::string& x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->desc (x);
}

void DispFrequency_pimpl::
xpos_min (signed char x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->xpos_min (x);
}

void DispFrequency_pimpl::
xpos_max (signed char x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->xpos_max (x);
}

void DispFrequency_pimpl::
xcount (signed char x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->xcount (x);
}

void DispFrequency_pimpl::
freqValue (const ::freqValue& x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->freqValue (x);
}

void DispFrequency_pimpl::
unitPrefix (::unitPrefix* x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->unitPrefix (x);
}

void DispFrequency_pimpl::
dispUnit (const ::dispUnit& x)
{
  this->DispFrequency_pimpl_state_.DispFrequency_->dispUnit (x);
}

::DispFrequency* DispFrequency_pimpl::
post_DispFrequency ()
{
  ::DispFrequency* r = this->DispFrequency_pimpl_state_.DispFrequency_;
  this->DispFrequency_pimpl_state_.DispFrequency_ = 0;
  return r;
}

// prefix_pimpl
//

prefix_pimpl::
prefix_pimpl ()
: prefix_pskel (&base_impl_)
{
}

void prefix_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->prefix_pimpl_state_.prefix_ = ::prefix ();
}

void prefix_pimpl::
id (signed char x)
{
  this->prefix_pimpl_state_.prefix_.id (x);
}

void prefix_pimpl::
desc (const ::std::string& x)
{
  this->prefix_pimpl_state_.prefix_.desc (x);
}

void prefix_pimpl::
default_value (const ::std::string& x)
{
  this->prefix_pimpl_state_.prefix_.default_value (x);
}

::prefix prefix_pimpl::
post_prefix ()
{
  static_cast< ::std::string& > (this->prefix_pimpl_state_.prefix_) = 
  this->base_impl_.post_string ();
  return this->prefix_pimpl_state_.prefix_;
}

// unitPrefix_pimpl
//

unitPrefix_pimpl::
unitPrefix_pimpl (bool b)
{
  this->unitPrefix_pimpl_base_ = b;
  this->unitPrefix_pimpl_state_.unitPrefix_ = 0;
}

unitPrefix_pimpl::
~unitPrefix_pimpl ()
{
  if (!this->unitPrefix_pimpl_base_ && this->unitPrefix_pimpl_state_.unitPrefix_)
    delete this->unitPrefix_pimpl_state_.unitPrefix_;
}

void unitPrefix_pimpl::
_reset ()
{
  unitPrefix_pskel::_reset ();

  if (!this->unitPrefix_pimpl_base_ && this->unitPrefix_pimpl_state_.unitPrefix_)
  {
    delete this->unitPrefix_pimpl_state_.unitPrefix_;
    this->unitPrefix_pimpl_state_.unitPrefix_ = 0;
  }
}

void unitPrefix_pimpl::
pre_impl (::unitPrefix* x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_ = x;
}

void unitPrefix_pimpl::
pre ()
{
  ::unitPrefix* x = new ::unitPrefix;
  this->pre_impl (x);
}

void unitPrefix_pimpl::
id (signed char x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->id (x);
}

void unitPrefix_pimpl::
desc (const ::std::string& x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->desc (x);
}

void unitPrefix_pimpl::
xpos_min (signed char x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->xpos_min (x);
}

void unitPrefix_pimpl::
xpos_max (signed char x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->xpos_max (x);
}

void unitPrefix_pimpl::
xcount (signed char x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->xcount (x);
}

void unitPrefix_pimpl::
mode (const ::std::string& x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->mode (x);
}

void unitPrefix_pimpl::
selected (signed char x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->selected (x);
}

void unitPrefix_pimpl::
prefix (const ::prefix& x)
{
  this->unitPrefix_pimpl_state_.unitPrefix_->prefix ().push_back (x);
}

::unitPrefix* unitPrefix_pimpl::
post_unitPrefix ()
{
  ::unitPrefix* r = this->unitPrefix_pimpl_state_.unitPrefix_;
  this->unitPrefix_pimpl_state_.unitPrefix_ = 0;
  return r;
}

// UIXConfig_paggr
//

UIXConfig_paggr::
UIXConfig_paggr ()
{
  this->DispTitle_p_.parsers (this->byte_p_,
                              this->textObj1_p_);

  this->textObj1_p_.parsers (this->byte_p_,
                             this->string_p_,
                             this->byte_p_,
                             this->byte_p_,
                             this->byte_p_,
                             this->string_p_);

  this->textObj_p_.parsers (this->byte_p_,
                            this->string_p_,
                            this->byte_p_,
                            this->byte_p_,
                            this->byte_p_,
                            this->string_p_);

  this->DispFrequency_p_.parsers (this->byte_p_,
                                  this->string_p_,
                                  this->byte_p_,
                                  this->byte_p_,
                                  this->byte_p_,
                                  this->freqValue_p_,
                                  this->unitPrefix_p_,
                                  this->dispUnit_p_);

  this->freqValue_p_.parsers (this->byte_p_,
                              this->string_p_,
                              this->byte_p_,
                              this->byte_p_,
                              this->byte_p_);

  this->unitPrefix_p_.parsers (this->byte_p_,
                               this->string_p_,
                               this->byte_p_,
                               this->byte_p_,
                               this->byte_p_,
                               this->string_p_,
                               this->byte_p_,
                               this->prefix_p_);

  this->UIXConfig_p_.parsers (this->string_p_,
                              this->ApplicationStates_p_);

  this->ApplicationStates_p_.parsers (this->AppState_p_);

  this->prefix_p_.parsers (this->byte_p_,
                           this->string_p_,
                           this->string_p_);

  this->dispUnit_p_.parsers (this->byte_p_,
                             this->string_p_,
                             this->byte_p_,
                             this->byte_p_,
                             this->byte_p_);

  this->mode_p_.parsers (this->byte_p_,
                         this->string_p_);

  this->ScreenObjects_p_.parsers (this->LCDCharacterLine_p_);

  this->LCDCharacterLine_p_.parsers (this->byte_p_,
                                     this->byte_p_,
                                     this->DispTitle_p_,
                                     this->textObj_p_,
                                     this->DispFrequency_p_,
                                     this->DispIdentifier_p_,
                                     this->DispDuration_p_,
                                     this->DispDutyCycle_p_,
                                     this->DispVoltage_p_);

  this->DispDuration_p_.parsers (this->byte_p_,
                                 this->durationValue_p_,
                                 this->dispUnit1_p_);

  this->DispIdentifier_p_.parsers (this->byte_p_,
                                   this->string_p_,
                                   this->byte_p_,
                                   this->byte_p_,
                                   this->byte_p_);

  this->DispDutyCycle_p_.parsers (this->byte_p_,
                                  this->dutyCycle_p_,
                                  this->dispUnit2_p_);

  this->dispUnit3_p_.parsers (this->byte_p_,
                              this->string_p_,
                              this->byte_p_,
                              this->byte_p_,
                              this->byte_p_);

  this->durationValue_p_.parsers (this->byte_p_,
                                  this->string_p_,
                                  this->byte_p_,
                                  this->byte_p_,
                                  this->byte_p_);

  this->dispUnit1_p_.parsers (this->byte_p_,
                              this->string_p_,
                              this->byte_p_,
                              this->byte_p_,
                              this->byte_p_);

  this->dispUnit2_p_.parsers (this->byte_p_,
                              this->string_p_,
                              this->byte_p_,
                              this->byte_p_,
                              this->byte_p_);

  this->voltageValue_p_.parsers (this->byte_p_,
                                 this->string_p_,
                                 this->byte_p_,
                                 this->byte_p_,
                                 this->byte_p_);

  this->dutyCycle_p_.parsers (this->byte_p_,
                              this->string_p_,
                              this->byte_p_,
                              this->byte_p_,
                              this->byte_p_);

  this->DispVoltage_p_.parsers (this->byte_p_,
                                this->voltageValue_p_,
                                this->dispUnit3_p_);

  this->AppState_p_.parsers (this->byte_p_,
                             this->string_p_,
                             this->string_p_,
                             this->AppModes_p_,
                             this->ScreenObjects_p_);

  this->AppModes_p_.parsers (this->mode_p_);
}

const char* UIXConfig_paggr::
root_name ()
{
  return "UIXConfig";
}

const char* UIXConfig_paggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

