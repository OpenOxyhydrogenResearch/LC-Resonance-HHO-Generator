// file      : xsd-frontend/semantic-graph/fundamental.cxx
// author    : Boris Kolpackov <boris@codesynthesis.com>
// copyright : Copyright (c) 2005-2011 Code Synthesis Tools CC
// license   : GNU GPL v2 + exceptions; see accompanying LICENSE file

// Note, that this file is automatically generated!
//

#include <xsd-frontend/semantic-graph/fundamental.hxx>

namespace XSDFrontend
{
  namespace SemanticGraph
  {
    namespace Fundamental
    {
      namespace RTTI = Cult::RTTI;

      using RTTI::Access;
      using RTTI::TypeInfo;


      // Type
      //
      namespace
      {
        struct TypeInit
        {
          TypeInit ()
          {
            TypeInfo ti (typeid (Type));
            ti.add_base (Access::public_, true, typeid (SemanticGraph::Type));
            RTTI::insert (ti);
          }

        } any_type_init_;
      }

      Type::
      Type ()
      {
      }


      // Byte
      //
      namespace
      {
        struct ByteInit
        {
          ByteInit ()
          {
            TypeInfo ti (typeid (Byte));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } byte_init_;
      }

      Byte::
      Byte (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // UnsignedByte
      //
      namespace
      {
        struct UnsignedByteInit
        {
          UnsignedByteInit ()
          {
            TypeInfo ti (typeid (UnsignedByte));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } unsigned_byte_init_;
      }

      UnsignedByte::
      UnsignedByte (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Short
      //
      namespace
      {
        struct ShortInit
        {
          ShortInit ()
          {
            TypeInfo ti (typeid (Short));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } short_init_;
      }

      Short::
      Short (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // UnsignedShort
      //
      namespace
      {
        struct UnsignedShortInit
        {
          UnsignedShortInit ()
          {
            TypeInfo ti (typeid (UnsignedShort));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } unsigned_short_init_;
      }

      UnsignedShort::
      UnsignedShort (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Int
      //
      namespace
      {
        struct IntInit
        {
          IntInit ()
          {
            TypeInfo ti (typeid (Int));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } int_init_;
      }

      Int::
      Int (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // UnsignedInt
      //
      namespace
      {
        struct UnsignedIntInit
        {
          UnsignedIntInit ()
          {
            TypeInfo ti (typeid (UnsignedInt));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } unsigned_int_init_;
      }

      UnsignedInt::
      UnsignedInt (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Long
      //
      namespace
      {
        struct LongInit
        {
          LongInit ()
          {
            TypeInfo ti (typeid (Long));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } long_init_;
      }

      Long::
      Long (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // UnsignedLong
      //
      namespace
      {
        struct UnsignedLongInit
        {
          UnsignedLongInit ()
          {
            TypeInfo ti (typeid (UnsignedLong));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } unsigned_long_init_;
      }

      UnsignedLong::
      UnsignedLong (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Integer
      //
      namespace
      {
        struct IntegerInit
        {
          IntegerInit ()
          {
            TypeInfo ti (typeid (Integer));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } integer_init_;
      }

      Integer::
      Integer (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NonPositiveInteger
      //
      namespace
      {
        struct NonPositiveIntegerInit
        {
          NonPositiveIntegerInit ()
          {
            TypeInfo ti (typeid (NonPositiveInteger));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } non_positive_integer_init_;
      }

      NonPositiveInteger::
      NonPositiveInteger (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NonNegativeInteger
      //
      namespace
      {
        struct NonNegativeIntegerInit
        {
          NonNegativeIntegerInit ()
          {
            TypeInfo ti (typeid (NonNegativeInteger));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } non_negative_integer_init_;
      }

      NonNegativeInteger::
      NonNegativeInteger (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // PositiveInteger
      //
      namespace
      {
        struct PositiveIntegerInit
        {
          PositiveIntegerInit ()
          {
            TypeInfo ti (typeid (PositiveInteger));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } positive_integer_init_;
      }

      PositiveInteger::
      PositiveInteger (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NegativeInteger
      //
      namespace
      {
        struct NegativeIntegerInit
        {
          NegativeIntegerInit ()
          {
            TypeInfo ti (typeid (NegativeInteger));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } negative_integer_init_;
      }

      NegativeInteger::
      NegativeInteger (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Boolean
      //
      namespace
      {
        struct BooleanInit
        {
          BooleanInit ()
          {
            TypeInfo ti (typeid (Boolean));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } boolean_init_;
      }

      Boolean::
      Boolean (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Float
      //
      namespace
      {
        struct FloatInit
        {
          FloatInit ()
          {
            TypeInfo ti (typeid (Float));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } float_init_;
      }

      Float::
      Float (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Double
      //
      namespace
      {
        struct DoubleInit
        {
          DoubleInit ()
          {
            TypeInfo ti (typeid (Double));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } double_init_;
      }

      Double::
      Double (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Decimal
      //
      namespace
      {
        struct DecimalInit
        {
          DecimalInit ()
          {
            TypeInfo ti (typeid (Decimal));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } decimal_init_;
      }

      Decimal::
      Decimal (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // String
      //
      namespace
      {
        struct StringInit
        {
          StringInit ()
          {
            TypeInfo ti (typeid (String));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } string_init_;
      }

      String::
      String (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NormalizedString
      //
      namespace
      {
        struct NormalizedStringInit
        {
          NormalizedStringInit ()
          {
            TypeInfo ti (typeid (NormalizedString));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } normalized_string_init_;
      }

      NormalizedString::
      NormalizedString (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Token
      //
      namespace
      {
        struct TokenInit
        {
          TokenInit ()
          {
            TypeInfo ti (typeid (Token));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } token_init_;
      }

      Token::
      Token (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Name
      //
      namespace
      {
        struct NameInit
        {
          NameInit ()
          {
            TypeInfo ti (typeid (Name));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } name_init_;
      }

      Name::
      Name (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NameToken
      //
      namespace
      {
        struct NameTokenInit
        {
          NameTokenInit ()
          {
            TypeInfo ti (typeid (NameToken));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } name_token_init_;
      }

      NameToken::
      NameToken (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NameTokens
      //
      namespace
      {
        struct NameTokensInit
        {
          NameTokensInit ()
          {
            TypeInfo ti (typeid (NameTokens));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } name_tokens_init_;
      }

      NameTokens::
      NameTokens (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // NCName
      //
      namespace
      {
        struct NCNameInit
        {
          NCNameInit ()
          {
            TypeInfo ti (typeid (NCName));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } NC_name_init_;
      }

      NCName::
      NCName (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Language
      //
      namespace
      {
        struct LanguageInit
        {
          LanguageInit ()
          {
            TypeInfo ti (typeid (Language));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } language_init_;
      }

      Language::
      Language (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // QName
      //
      namespace
      {
        struct QNameInit
        {
          QNameInit ()
          {
            TypeInfo ti (typeid (QName));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } q_name_init_;
      }

      QName::
      QName (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Id
      //
      namespace
      {
        struct IdInit
        {
          IdInit ()
          {
            TypeInfo ti (typeid (Id));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } id_init_;
      }

      Id::
      Id (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // IdRef
      //
      namespace
      {
        struct IdRefInit
        {
          IdRefInit ()
          {
            TypeInfo ti (typeid (IdRef));
	    ti.add_base (Access::public_, true, typeid (Type));
            ti.add_base (Access::public_, true, typeid (Specialization));
            RTTI::insert (ti);
          }

        } id_ref_init_;
      }

      IdRef::
      IdRef (Path const& file,
             SemanticGraph::UnsignedLong line,
             SemanticGraph::UnsignedLong column)
          : Node (file, line, column)
      {
      }


      // IdRefs
      //
      namespace
      {
        struct IdRefsInit
        {
          IdRefsInit ()
          {
            TypeInfo ti (typeid (IdRefs));
	    ti.add_base (Access::public_, true, typeid (Type));
            ti.add_base (Access::public_, true, typeid (Specialization));
            RTTI::insert (ti);
          }

        } id_refs_init_;
      }

      IdRefs::
      IdRefs (Path const& file,
              SemanticGraph::UnsignedLong line,
              SemanticGraph::UnsignedLong column)
          : Node (file, line, column)
      {
      }


      // AnyURI
      //
      namespace
      {
        struct AnyURIInit
        {
          AnyURIInit ()
          {
            TypeInfo ti (typeid (AnyURI));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } any_URI_init_;
      }

      AnyURI::
      AnyURI (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Base64Binary
      //
      namespace
      {
        struct Base64BinaryInit
        {
          Base64BinaryInit ()
          {
            TypeInfo ti (typeid (Base64Binary));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } base_64_binary_init_;
      }

      Base64Binary::
      Base64Binary (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // HexBinary
      //
      namespace
      {
        struct HexBinaryInit
        {
          HexBinaryInit ()
          {
            TypeInfo ti (typeid (HexBinary));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } hex_binary_init_;
      }

      HexBinary::
      HexBinary (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Date
      //
      namespace
      {
        struct DateInit
        {
          DateInit ()
          {
            TypeInfo ti (typeid (Date));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } date_init_;
      }

      Date::
      Date (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // DateTime
      //
      namespace
      {
        struct DateTimeInit
        {
          DateTimeInit ()
          {
            TypeInfo ti (typeid (DateTime));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } date_time_init_;
      }

      DateTime::
      DateTime (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Duration
      //
      namespace
      {
        struct DurationInit
        {
          DurationInit ()
          {
            TypeInfo ti (typeid (Duration));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } duration_init_;
      }

      Duration::
      Duration (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Day
      //
      namespace
      {
        struct DayInit
        {
          DayInit ()
          {
            TypeInfo ti (typeid (Day));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } day_init_;
      }

      Day::
      Day (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Month
      //
      namespace
      {
        struct MonthInit
        {
          MonthInit ()
          {
            TypeInfo ti (typeid (Month));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } month_init_;
      }

      Month::
      Month (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // MonthDay
      //
      namespace
      {
        struct MonthDayInit
        {
          MonthDayInit ()
          {
            TypeInfo ti (typeid (MonthDay));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } month_day_init_;
      }

      MonthDay::
      MonthDay (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Year
      //
      namespace
      {
        struct YearInit
        {
          YearInit ()
          {
            TypeInfo ti (typeid (Year));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } year_init_;
      }

      Year::
      Year (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // YearMonth
      //
      namespace
      {
        struct YearMonthInit
        {
          YearMonthInit ()
          {
            TypeInfo ti (typeid (YearMonth));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } year_month_init_;
      }

      YearMonth::
      YearMonth (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Time
      //
      namespace
      {
        struct TimeInit
        {
          TimeInit ()
          {
            TypeInfo ti (typeid (Time));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } time_init_;
      }

      Time::
      Time (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Entity
      //
      namespace
      {
        struct EntityInit
        {
          EntityInit ()
          {
            TypeInfo ti (typeid (Entity));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } entity_init_;
      }

      Entity::
      Entity (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Entities
      //
      namespace
      {
        struct EntitiesInit
        {
          EntitiesInit ()
          {
            TypeInfo ti (typeid (Entities));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } entities_init_;
      }

      Entities::
      Entities (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }


      // Notation
      //
      namespace
      {
        struct NotationInit
        {
          NotationInit ()
          {
            TypeInfo ti (typeid (Notation));
            ti.add_base (Access::public_, true, typeid (Type));
            RTTI::insert (ti);
          }

        } notation_init_;
      }

      Notation::
      Notation (Path const& file,
          SemanticGraph::UnsignedLong line,
          SemanticGraph::UnsignedLong column)
        : Node (file, line, column)
      {
      }
    }
  }
}
